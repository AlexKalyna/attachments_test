{
	"info": {
		"_postman_id": "d0d93ee0-6e8e-4f75-872c-dff8f59561db",
		"name": "Faction_Portal_API_Tests",
		"description": "This is a primary collection for the React Portal API testing.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9052892"
	},
	"item": [
		{
			"name": "preconditions",
			"item": [
				{
					"name": "fetch Master_Admin token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set( \"code_challenge\",",
									"    CryptoJS.SHA256(pm.environment.get(\"code_verifier\"))",
									"        .toString(CryptoJS.enc.Base64)",
									"        .replace(\"+\", \"-\")",
									"        .replace(\"/\", \"_\")",
									"        .replace(/=+$/, \"\")",
									");",
									"",
									"/**",
									" * @private",
									" * @description Internal function to run tasks in series",
									" * ",
									" * @param {Array<Function>} tasks",
									" * @param {Function} cb",
									" * @param {Number} currOperation",
									" * @param {Array<Any>} results",
									" */",
									"function _series (tasks, cb, currOperation = 0, results = []) {",
									"    // Bail-out condition",
									"    if (currOperation === tasks.length) {",
									"        return cb(null, results);",
									"    }",
									"",
									"    if (typeof tasks[currOperation] !== 'function') {",
									"        return cb(new Error('asyncSeries: Please provide a function'));",
									"    }",
									"",
									"    tasks[currOperation]((err, res) => {",
									"        if (err) {",
									"            return cb(err);",
									"        }",
									"",
									"        results.push(res);",
									"",
									"        // Recursively call the next task in series till we're done executing all the operations",
									"        return _series(tasks, cb, currOperation + 1, results);",
									"    });",
									"}",
									"",
									"/**",
									" * @description asyncSeries to execute requests in a series format",
									" * ",
									" * @param {Array<Function>} tasks",
									" * @param {Function} cb",
									" */",
									"function asyncSeries (tasks, cb = () => {}) {",
									"    return _series(tasks, cb);",
									"}",
									"",
									"// Usage:",
									"",
									"asyncSeries([",
									"",
									"    //1st call \"Authorize\"",
									"    (cb) => pm.sendRequest({",
									"    url: 'https://auth.pingone.com/'+ pm.environment.get('service_id')+'/as/authorize?client_id='+ pm.environment.get('client_id')+'&redirect_uri='+pm.environment.get('redirect_uri')+'&response_type=code&scope=openid profile email portal portal_admin&state=dbdc93063478479fa09bfe728cb261bf&code_challenge='+pm.environment.get('code_challenge')+'&code_challenge_method=S256&response_mode=query',",
									"    method: 'GET'},",
									"(err,res) => {",
									"    pm.environment.set(\"flowId\", res.headers.get('Location').split(\"flowId=\")[1]);",
									"    cb(err,res);",
									"}),",
									"",
									"     //2nd call \"Username\"",
									"    (cb) => pm.sendRequest({",
									"    url: pm.environment.get('pingURI')+'/'+pm.environment.get('service_id')+'/flows/'+pm.environment.get('flowId'),",
									"    method: 'POST',",
									"    header:{'Content-type': 'application/vnd.pingidentity.user.lookup+json'},",
									"    body:{mode: 'raw',",
									"            raw: JSON.stringify({'username': pm.environment.get('master_admin')})",
									"            }",
									"}, ",
									"(err,res) => {",
									"    cb(err,res);",
									"}),",
									"    // 3nd call \"Password\"",
									"    (cb) => pm.sendRequest({",
									"    url: pm.environment.get('pingURI')+'/'+pm.environment.get('service_id')+'/flows/'+pm.environment.get('flowId'),",
									"    method: 'POST',",
									"    header:{'content-type': 'application/vnd.pingidentity.usernamePassword.check+json'},",
									"    body:{ mode:'raw',",
									"            raw: JSON.stringify({'password': pm.environment.get('password')})",
									"    } ",
									"}, ",
									"(err,res) => {",
									"    cb(err,res);",
									"}),",
									"    //4th call \"Resume\"",
									"    (cb) => pm.sendRequest({",
									"    url: pm.environment.get('pingURI')+'/'+pm.environment.get('service_id')+'/as/resume?flowId='+pm.environment.get('flowId'),",
									"    method: 'GET'",
									"},",
									"(err,res) => {",
									"    let str = res.headers.get('Location').split('code=')[1];",
									"    pm.environment.set('code', str.split('&')[0]);",
									"   cb(err,res);",
									"})  ",
									"]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    ",
									"    const response = pm.response.json();",
									"    pm.environment.set(\"token\", response.access_token);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "default"
								},
								{
									"key": "code",
									"value": "{{code}}",
									"type": "default"
								},
								{
									"key": "redirect_uri",
									"value": "{{redirect_uri}}",
									"type": "default"
								},
								{
									"key": "code_verifier",
									"value": "{{code_verifier}}",
									"type": "default"
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "{{pingURI}}/{{service_id}}/as/token",
							"host": [
								"{{pingURI}}"
							],
							"path": [
								"{{service_id}}",
								"as",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tickets_e2e",
			"item": [
				{
					"name": "1 _ticket",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaTicket\")));",
									"        });",
									"",
									"    const res = pm.response.json();",
									"   ",
									"    pm.collectionVariables.set(\"ticketId\", res.identifier);",
									"    pm.collectionVariables.set(\"actualTicketNumber\", res.number);",
									"    pm.collectionVariables.set(\"actualTicketTitle\", res.title);",
									"    pm.collectionVariables.set(\"actualTicketDescription\", res.description);",
									"    //console.log(pm.collectionVariables.get('ticketId'));",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{$randomLoremSentence}}\",\n    \"description\": \"{{$randomLoremSentence}}\",\n    \"type\":\"cAsE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/tickets",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"tickets"
							]
						}
					},
					"response": []
				},
				{
					"name": "ticket by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaTicket\")));",
									"        });",
									"",
									"    const res = pm.response.json();",
									"",
									"    pm.test(\"Check ticket identifier\", ()=>{",
									"        pm.expect(res.identifier).to.be.equal(pm.collectionVariables.get('ticketId'))",
									"    });",
									"",
									"    pm.test(\"Check ticket number\", ()=>{",
									"        pm.expect(res.number).to.be.equal(pm.collectionVariables.get('actualTicketNumber'))",
									"    });",
									"",
									"     pm.test(\"Check ticket title\", ()=>{",
									"        pm.expect(res.title).to.be.equal(pm.collectionVariables.get('actualTicketTitle'))",
									"    });",
									"",
									"     pm.test(\"Check ticket description\", ()=>{",
									"        pm.expect(res.description).to.be.equal(pm.collectionVariables.get('actualTicketDescription'))",
									"    });",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/tickets/{{ticketId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"tickets",
								"{{ticketId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaTicketComment\")));",
									"        });",
									"",
									"    const res = pm.response.json();",
									"    pm.collectionVariables.set('actualCommentId', res.identifier);",
									"    pm.collectionVariables.set('actualCommentText', res.text)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImRlZmF1bHQifQ.eyJjbGllbnRfaWQiOiJlZjQ3NDEwMy02N2VhLTQ4MjEtYWEzOS03NTNkZjQ1Y2JkYjgiLCJpc3MiOiJodHRwczovL2F1dGgucGluZ29uZS5jb20vNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5L2FzIiwiaWF0IjoxNjM4NDM1MDAzLCJleHAiOjE2Mzg0Mzg2MDMsImF1ZCI6WyJmYWN0aW9uX3BvcnRhbCJdLCJzY29wZSI6InBvcnRhbF9hZG1pbiBvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInN1YiI6Im9rYWx5bmFfbWFzdGVyX2FkbWluIiwic2lkIjoiMDJmMDcyM2UtZjA1Ni00OWFlLWIxMDAtZDk4NzdkNGIzOGQ0IiwicG9ydGFsX3JvbGVzIjoiTWFzdGVyX0FkbWluLCBQb3J0YWxfR3JvdXBfQWRtaW4sIFBvcnRhbF9PcmdfQWRtaW4sIFBvcnRhbF9TZXJ2aWNlX0FkbWluLCBQb3J0YWxfVXNlciIsInVzZXJfaWQiOiIwYjg0YTg3Ny1jNTM1LTQyMGQtOTJjYi02ODJkNjI5YzhhMWMiLCJsYXN0X25hbWUiOiJLYWx5bmEiLCJlbWFpbCI6Im9sZWtzYW5kci5rYWx5bmFAbWV2LmNvbSIsImZpcnN0X25hbWUiOiJPbGVrc2FuZHIiLCJwb3B1bGF0aW9uIjoiNGExZTY5ZGItNDVkMS00ODA3LWE3YTctNTg0NjgzMDIwY2YwIiwiZW52IjoiNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5Iiwib3JnIjoiYzM2YTRkZGEtZjI0OS00ZTRkLTg5MjAtN2RiNWI4ZGMzYTgyIiwicDEudXNlcklkIjoiMGI4NGE4NzctYzUzNS00MjBkLTkyY2ItNjgyZDYyOWM4YTFjIn0.Hn_KKYk5bdh3LeQBl0A-I45Ia_vLfhNYbKamEs7yr8IJfctykMZYCXkFccIO6yX1ZE67eBy5apCMqB6beYBYR56D_McdaVCcapkp_PLKtFr6KNIfWngp6MXT28m57Vo9n6hTgDfgwVvSiGSj_8Qk0apY7LrcsrOeJO2G_fG0Ao4_K1ecd655nQ2MVSm58rMrAbRDmHBhSGbFW7MkFTKs9LtwSCYWIzrcG9083E-hST8sUN4p7p7Mw0q2_SbfDANhzk5OsnQO8jzbCDfGkqMkQLIWBmwm6FaAn8135K8trPVTGNp6dhDmOyH8oSCUl2Lf7CVLrhLd4v1ICIgHL5id6w",
								"disabled": true
							},
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"{{$randomLoremSentence}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/comments",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"tickets",
								"{{ticketId}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "ticket comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaTicketComments\")))",
									"        });",
									"",
									"    const res = pm.response.json()",
									"",
									"    pm.test('The commentId is present on the comments list', () => {",
									"        _.each(res.identifier, (item) => {",
									"        pm.expect(item.identifier).to.include(pm.collectionVariables.get('actualCommentId'))",
									"        });",
									"    });",
									"",
									"    pm.test('The comment text is present on the comments list', () => {",
									"        _.each(res.identifier, (item) => {",
									"        pm.expect(item.identifier).to.include(pm.collectionVariables.get('actualCommentText'))",
									"        });",
									"    });",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/comments",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"tickets",
								"{{ticketId}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "ticket attachment - 1 file",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaTicketAttachments\")));",
									"        });",
									"        ",
									"    let res = pm.response.json();",
									"    pm.collectionVariables.set(\"attachmentId\", res[0].identifier);",
									"    pm.collectionVariables.set(\"attachmentFileName\", res[0].fileName);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": "svg_3Mb.svg"
								}
							]
						},
						"url": {
							"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"tickets",
								"{{ticketId}}",
								"attachments"
							]
						}
					},
					"response": []
				},
				{
					"name": "ticket attachments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaTicketAttachments\")));",
									"        });",
									"",
									"const res = pm.response.json()",
									"",
									"    pm.test('The attachmentId is present on the attachments list', () => {",
									"        _.each(res.identifier, (item) => {",
									"        pm.expect(item.identifier).to.include(pm.collectionVariables.get('attachmentId'))",
									"        });",
									"    });",
									"",
									"    pm.test('The attachment text is present on the attachments list', () => {",
									"        _.each(res.identifier, (item) => {",
									"        pm.expect(item.identifier).to.include(pm.collectionVariables.get('actualAttachmentText'))",
									"        });",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"tickets",
								"{{ticketId}}",
								"attachments"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload ticket attachment by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.test(\"Content-Type header is image/svg+xml\", () => {",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('image/svg+xml')",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments/{{attachmentId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"tickets",
								"{{ticketId}}",
								"attachments",
								"{{attachmentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2_ticket1 - title160, description1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Contains skipped tests",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaTicket\")));",
									"        });",
									"",
									"    const res = pm.response.json();",
									"    const title = res.title;",
									"    const description = res.description;",
									"",
									"    pm.test('Number of chars in title = ' + title.length, function () {",
									"        pm.expect(title.length).to.equal(160);});",
									"",
									"    pm.test('Number of chars in description = ' + description.length, function () {",
									"        pm.expect(description.length).to.equal(1);});",
									"",
									"    pm.collectionVariables.set(\"ticketId1\", res.identifier);",
									"    pm.collectionVariables.set(\"actualTicketNumber1\", res.number);",
									"    pm.collectionVariables.set(\"actualTicketTitle1\", res.title);",
									"    pm.collectionVariables.set(\"actualTicketDescription1\", res.description);",
									"     //console.log(pm.collectionVariables.get('ticketId1'));",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{160charText}}\",\n    \"description\": \"a\",\n    \"type\":\"cAsE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/tickets",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"tickets"
							]
						}
					},
					"response": []
				},
				{
					"name": "ticket1 by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaTicket\")));",
									"        });",
									"",
									"    const res = pm.response.json();",
									"",
									"    pm.test(\"Check ticket1 identifier\", ()=>{",
									"        pm.expect(res.identifier).to.be.equal(pm.collectionVariables.get('ticketId1'))",
									"    });",
									"",
									"    pm.test(\"Check ticket1 number\", ()=>{",
									"        pm.expect(res.number).to.be.equal(pm.collectionVariables.get('actualTicketNumber1'))",
									"    });",
									"",
									"     pm.test(\"Check ticket1 title\", ()=>{",
									"        pm.expect(res.title).to.be.equal(pm.collectionVariables.get('actualTicketTitle1'))",
									"    });",
									"",
									"     pm.test(\"Check ticket1 description\", ()=>{",
									"        pm.expect(res.description).to.be.equal(pm.collectionVariables.get('actualTicketDescription1'))",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/tickets/{{ticketId1}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"tickets",
								"{{ticketId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "comment1 - text255",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaTicketComment\")));",
									"        });",
									"",
									"    const res = pm.response.json();",
									"    const text = res.text;",
									"",
									"    pm.test('Number of chars in the comment text = ' + text.length, function () {",
									"        pm.expect(text.length).to.equal(255);});",
									"",
									"    pm.collectionVariables.set('actualCommentId1', res.identifier);",
									"    pm.collectionVariables.set('actualCommentText1', res.text)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImRlZmF1bHQifQ.eyJjbGllbnRfaWQiOiJlZjQ3NDEwMy02N2VhLTQ4MjEtYWEzOS03NTNkZjQ1Y2JkYjgiLCJpc3MiOiJodHRwczovL2F1dGgucGluZ29uZS5jb20vNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5L2FzIiwiaWF0IjoxNjM4NDM1MDAzLCJleHAiOjE2Mzg0Mzg2MDMsImF1ZCI6WyJmYWN0aW9uX3BvcnRhbCJdLCJzY29wZSI6InBvcnRhbF9hZG1pbiBvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInN1YiI6Im9rYWx5bmFfbWFzdGVyX2FkbWluIiwic2lkIjoiMDJmMDcyM2UtZjA1Ni00OWFlLWIxMDAtZDk4NzdkNGIzOGQ0IiwicG9ydGFsX3JvbGVzIjoiTWFzdGVyX0FkbWluLCBQb3J0YWxfR3JvdXBfQWRtaW4sIFBvcnRhbF9PcmdfQWRtaW4sIFBvcnRhbF9TZXJ2aWNlX0FkbWluLCBQb3J0YWxfVXNlciIsInVzZXJfaWQiOiIwYjg0YTg3Ny1jNTM1LTQyMGQtOTJjYi02ODJkNjI5YzhhMWMiLCJsYXN0X25hbWUiOiJLYWx5bmEiLCJlbWFpbCI6Im9sZWtzYW5kci5rYWx5bmFAbWV2LmNvbSIsImZpcnN0X25hbWUiOiJPbGVrc2FuZHIiLCJwb3B1bGF0aW9uIjoiNGExZTY5ZGItNDVkMS00ODA3LWE3YTctNTg0NjgzMDIwY2YwIiwiZW52IjoiNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5Iiwib3JnIjoiYzM2YTRkZGEtZjI0OS00ZTRkLTg5MjAtN2RiNWI4ZGMzYTgyIiwicDEudXNlcklkIjoiMGI4NGE4NzctYzUzNS00MjBkLTkyY2ItNjgyZDYyOWM4YTFjIn0.Hn_KKYk5bdh3LeQBl0A-I45Ia_vLfhNYbKamEs7yr8IJfctykMZYCXkFccIO6yX1ZE67eBy5apCMqB6beYBYR56D_McdaVCcapkp_PLKtFr6KNIfWngp6MXT28m57Vo9n6hTgDfgwVvSiGSj_8Qk0apY7LrcsrOeJO2G_fG0Ao4_K1ecd655nQ2MVSm58rMrAbRDmHBhSGbFW7MkFTKs9LtwSCYWIzrcG9083E-hST8sUN4p7p7Mw0q2_SbfDANhzk5OsnQO8jzbCDfGkqMkQLIWBmwm6FaAn8135K8trPVTGNp6dhDmOyH8oSCUl2Lf7CVLrhLd4v1ICIgHL5id6w",
								"disabled": true
							},
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"{{255charText}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/tickets/{{ticketId1}}/comments",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"tickets",
								"{{ticketId1}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "ticket1 comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaTicketComments\")))",
									"        });",
									"",
									"    const res = pm.response.json()",
									"",
									"    pm.test('The commentId is present on the comments list', () => {",
									"        _.each(res.identifier, (item) => {",
									"        pm.expect(item.identifier).to.include(pm.collectionVariables.get('actualCommentId1'))",
									"        });",
									"    });",
									"",
									"    pm.test('The comment text is present on the comments list', () => {",
									"        _.each(res.identifier, (item) => {",
									"        pm.expect(item.identifier).to.include(pm.collectionVariables.get('actualCommentText1'))",
									"        });",
									"    });",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/tickets/{{ticketId1}}/comments",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"tickets",
								"{{ticketId1}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "ticket1 attachments - 2 files",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaTicketAttachments\")));",
									"        });",
									"        ",
									"    let res = pm.response.json();",
									"    pm.collectionVariables.set(\"attachmentId1\", res[1].identifier);",
									"    pm.collectionVariables.set(\"attachmentFileName1\", res[1].fileName);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": "jpeg_1,1Mb.jpeg"
								},
								{
									"key": "",
									"type": "file",
									"src": "pdf_1,1Mb.pdf"
								}
							]
						},
						"url": {
							"raw": "{{baseURI}}/v1/tickets/{{ticketId1}}/attachments",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"tickets",
								"{{ticketId1}}",
								"attachments"
							]
						}
					},
					"response": []
				},
				{
					"name": "ticket1 attachments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaTicketAttachments\")));",
									"        });",
									"",
									"    const res = pm.response.json()",
									"",
									"    pm.test('The attachmentId is present on the attachments list', () => {",
									"        _.each(res.identifier, (item) => {",
									"        pm.expect(item.identifier).to.include(pm.collectionVariables.get('attachmentId1'))",
									"        });",
									"    });",
									"",
									"    pm.test('The attachment text is present on the attachments list', () => {",
									"        _.each(res.identifier, (item) => {",
									"        pm.expect(item.identifier).to.include(pm.collectionVariables.get('actualAttachmentText1'))",
									"        });",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/tickets/{{ticketId1}}/attachments",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"tickets",
								"{{ticketId1}}",
								"attachments"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload 2nd ticket1 attachment by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.test(\"Content-Type header is application/octet-stream\", () => {",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/octet-stream')",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/tickets/{{ticketId1}}/attachments/{{attachmentId1}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"tickets",
								"{{ticketId1}}",
								"attachments",
								"{{attachmentId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3_ticket2 - title1, description255",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaTicket\")));",
									"        });",
									"",
									"    const res = pm.response.json();",
									"    const title = res.title;",
									"    const description = res.description;",
									"",
									"    pm.test('Number of chars in title = ' + title.length, function () {",
									"        pm.expect(title.length).to.equal(1);});",
									"",
									"    pm.test('Number of chars in description = ' + description.length, function () {",
									"        pm.expect(description.length).to.equal(255);});",
									"",
									"    pm.collectionVariables.set(\"ticketId2\", res.identifier);",
									"    pm.collectionVariables.set(\"actualTicketNumber2\", res.number);",
									"    pm.collectionVariables.set(\"actualTicketTitle2\", res.title);",
									"    pm.collectionVariables.set(\"actualTicketDescription2\", res.description);",
									"     //console.log(pm.collectionVariables.get('ticketId2'));",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"k\",\n    \"description\": \"{{255charText}}\",\n    \"type\":\"cAsE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/tickets",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"tickets"
							]
						}
					},
					"response": []
				},
				{
					"name": "ticket2 by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaTicket\")));",
									"        });",
									"",
									"    const res = pm.response.json();",
									"",
									"    pm.test(\"Check ticket identifier\", ()=>{",
									"        pm.expect(res.identifier).to.be.equal(pm.collectionVariables.get('ticketId2'))",
									"    });",
									"",
									"    pm.test(\"Check ticket number\", ()=>{",
									"        pm.expect(res.number).to.be.equal(pm.collectionVariables.get('actualTicketNumber2'))",
									"    });",
									"",
									"     pm.test(\"Check ticket title\", ()=>{",
									"        pm.expect(res.title).to.be.equal(pm.collectionVariables.get('actualTicketTitle2'))",
									"    });",
									"",
									"     pm.test(\"Check ticket description\", ()=>{",
									"        pm.expect(res.description).to.be.equal(pm.collectionVariables.get('actualTicketDescription2'))",
									"    });",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/tickets/{{ticketId2}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"tickets",
								"{{ticketId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "comment2-text1char",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaTicketComment\")));",
									"        });",
									"",
									"    const res = pm.response.json();",
									"    const text = res.text;",
									"",
									"    pm.test('Number of chars in the comment text = ' + text.length, function () {",
									"        pm.expect(text.length).to.equal(1);});",
									"",
									"    pm.collectionVariables.set('actualCommentId1', res.identifier);",
									"    pm.collectionVariables.set('actualCommentText1', res.text)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImRlZmF1bHQifQ.eyJjbGllbnRfaWQiOiJlZjQ3NDEwMy02N2VhLTQ4MjEtYWEzOS03NTNkZjQ1Y2JkYjgiLCJpc3MiOiJodHRwczovL2F1dGgucGluZ29uZS5jb20vNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5L2FzIiwiaWF0IjoxNjM4NDM1MDAzLCJleHAiOjE2Mzg0Mzg2MDMsImF1ZCI6WyJmYWN0aW9uX3BvcnRhbCJdLCJzY29wZSI6InBvcnRhbF9hZG1pbiBvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInN1YiI6Im9rYWx5bmFfbWFzdGVyX2FkbWluIiwic2lkIjoiMDJmMDcyM2UtZjA1Ni00OWFlLWIxMDAtZDk4NzdkNGIzOGQ0IiwicG9ydGFsX3JvbGVzIjoiTWFzdGVyX0FkbWluLCBQb3J0YWxfR3JvdXBfQWRtaW4sIFBvcnRhbF9PcmdfQWRtaW4sIFBvcnRhbF9TZXJ2aWNlX0FkbWluLCBQb3J0YWxfVXNlciIsInVzZXJfaWQiOiIwYjg0YTg3Ny1jNTM1LTQyMGQtOTJjYi02ODJkNjI5YzhhMWMiLCJsYXN0X25hbWUiOiJLYWx5bmEiLCJlbWFpbCI6Im9sZWtzYW5kci5rYWx5bmFAbWV2LmNvbSIsImZpcnN0X25hbWUiOiJPbGVrc2FuZHIiLCJwb3B1bGF0aW9uIjoiNGExZTY5ZGItNDVkMS00ODA3LWE3YTctNTg0NjgzMDIwY2YwIiwiZW52IjoiNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5Iiwib3JnIjoiYzM2YTRkZGEtZjI0OS00ZTRkLTg5MjAtN2RiNWI4ZGMzYTgyIiwicDEudXNlcklkIjoiMGI4NGE4NzctYzUzNS00MjBkLTkyY2ItNjgyZDYyOWM4YTFjIn0.Hn_KKYk5bdh3LeQBl0A-I45Ia_vLfhNYbKamEs7yr8IJfctykMZYCXkFccIO6yX1ZE67eBy5apCMqB6beYBYR56D_McdaVCcapkp_PLKtFr6KNIfWngp6MXT28m57Vo9n6hTgDfgwVvSiGSj_8Qk0apY7LrcsrOeJO2G_fG0Ao4_K1ecd655nQ2MVSm58rMrAbRDmHBhSGbFW7MkFTKs9LtwSCYWIzrcG9083E-hST8sUN4p7p7Mw0q2_SbfDANhzk5OsnQO8jzbCDfGkqMkQLIWBmwm6FaAn8135K8trPVTGNp6dhDmOyH8oSCUl2Lf7CVLrhLd4v1ICIgHL5id6w",
								"disabled": true
							},
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"M\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/tickets/{{ticketId2}}/comments",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"tickets",
								"{{ticketId2}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "ticket2 comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaTicketComments\")))",
									"        });",
									"",
									"    const res = pm.response.json()",
									"",
									"    pm.test('The commentId is present on the comments list', () => {",
									"        _.each(res.identifier, (item) => {",
									"        pm.expect(item.identifier).to.include(pm.collectionVariables.get('actualCommentId1'))",
									"        });",
									"    });",
									"",
									"    pm.test('The comment text is present on the comments list', () => {",
									"        _.each(res.identifier, (item) => {",
									"        pm.expect(item.identifier).to.include(pm.collectionVariables.get('actualCommentText1'))",
									"        });",
									"    });",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/tickets/{{ticketId2}}/comments",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"tickets",
								"{{ticketId2}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "ticket2 attachments - 3 files",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaTicketAttachments\")));",
									"        });",
									"        ",
									"    let res = pm.response.json();",
									"    pm.collectionVariables.set(\"attachmentId2\", res[2].identifier);",
									"    pm.collectionVariables.set(\"attachmentFileName2\", res[2].fileName);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": "mp4_1,1Mb.mp4"
								},
								{
									"key": "",
									"type": "file",
									"src": "docx_1,1Mb.docx"
								},
								{
									"key": "",
									"type": "file",
									"src": "png_1Mb.png"
								}
							]
						},
						"url": {
							"raw": "{{baseURI}}/v1/tickets/{{ticketId2}}/attachments",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"tickets",
								"{{ticketId2}}",
								"attachments"
							]
						}
					},
					"response": []
				},
				{
					"name": "ticket2 attachments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaTicketAttachments\")));",
									"        });",
									"",
									"    const res = pm.response.json()",
									"",
									"    pm.test('The attachmentId is present on the attachments list', () => {",
									"        _.each(res.identifier, (item) => {",
									"        pm.expect(item.identifier).to.include(pm.collectionVariables.get('attachmentId2'))",
									"        });",
									"    });",
									"",
									"    pm.test('The attachment text is present on the attachments list', () => {",
									"        _.each(res.identifier, (item) => {",
									"        pm.expect(item.identifier).to.include(pm.collectionVariables.get('actualAttachmentText2'))",
									"        });",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/tickets/{{ticketId2}}/attachments",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"tickets",
								"{{ticketId2}}",
								"attachments"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload 3rd ticket2 attachment by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.test.skip(\"Content-Type header is application/octet-stream\", () => {",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/octet-stream')",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/tickets/{{ticketId2}}/attachments/{{attachmentId2}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"tickets",
								"{{ticketId2}}",
								"attachments",
								"{{attachmentId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "tickets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.test('Response schema validation', ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get('schemaTickets')));",
									"        });",
									"",
									"    const res = pm.response.json()",
									"",
									"    pm.test('The ticket is present on the list', () => {",
									"        _.each(res.identifier, (item) => {",
									"        pm.expect(item.identifier).to.include(pm.collectionVariables.get('ticketId'))",
									"        });",
									"    });",
									"",
									"    pm.test('The ticket1 is present on the list', () => {",
									"        _.each(res.identifier, (item) => {",
									"        pm.expect(item.identifier).to.include(pm.collectionVariables.get('ticketId1'))",
									"        });",
									"    });",
									"",
									"    pm.test('The ticket2 is present on the list', () => {",
									"        _.each(res.identifier, (item) => {",
									"        pm.expect(item.identifier).to.include(pm.collectionVariables.get('ticketId2'))",
									"        });",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/tickets",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"tickets"
							],
							"query": [
								{
									"key": "requestStatus",
									"value": "Closed",
									"disabled": true
								},
								{
									"key": "requestStatus",
									"value": "In progress",
									"disabled": true
								},
								{
									"key": "requestStatus",
									"value": "Resolved",
									"disabled": true
								},
								{
									"key": "requestStatus",
									"value": "On hold",
									"disabled": true
								},
								{
									"key": "requestStatus",
									"value": "Cancelled",
									"disabled": true
								},
								{
									"key": "requestStatus",
									"value": "New",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tickets_negative",
			"item": [
				{
					"name": "POST/v1/tickets",
					"item": [
						{
							"name": "Tickets-wrong Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"    const errorMessage = res.error",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(errorMessage).to.be.equal(\"Content-Type parameter is not valid.\")",
											"    });",
											"                ",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"Unsupported content type - \")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"            pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImRlZmF1bHQifQ.eyJjbGllbnRfaWQiOiJlZjQ3NDEwMy02N2VhLTQ4MjEtYWEzOS03NTNkZjQ1Y2JkYjgiLCJpc3MiOiJodHRwczovL2F1dGgucGluZ29uZS5jb20vNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5L2FzIiwiaWF0IjoxNjM4NDM1MDAzLCJleHAiOjE2Mzg0Mzg2MDMsImF1ZCI6WyJmYWN0aW9uX3BvcnRhbCJdLCJzY29wZSI6InBvcnRhbF9hZG1pbiBvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInN1YiI6Im9rYWx5bmFfbWFzdGVyX2FkbWluIiwic2lkIjoiMDJmMDcyM2UtZjA1Ni00OWFlLWIxMDAtZDk4NzdkNGIzOGQ0IiwicG9ydGFsX3JvbGVzIjoiTWFzdGVyX0FkbWluLCBQb3J0YWxfR3JvdXBfQWRtaW4sIFBvcnRhbF9PcmdfQWRtaW4sIFBvcnRhbF9TZXJ2aWNlX0FkbWluLCBQb3J0YWxfVXNlciIsInVzZXJfaWQiOiIwYjg0YTg3Ny1jNTM1LTQyMGQtOTJjYi02ODJkNjI5YzhhMWMiLCJsYXN0X25hbWUiOiJLYWx5bmEiLCJlbWFpbCI6Im9sZWtzYW5kci5rYWx5bmFAbWV2LmNvbSIsImZpcnN0X25hbWUiOiJPbGVrc2FuZHIiLCJwb3B1bGF0aW9uIjoiNGExZTY5ZGItNDVkMS00ODA3LWE3YTctNTg0NjgzMDIwY2YwIiwiZW52IjoiNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5Iiwib3JnIjoiYzM2YTRkZGEtZjI0OS00ZTRkLTg5MjAtN2RiNWI4ZGMzYTgyIiwicDEudXNlcklkIjoiMGI4NGE4NzctYzUzNS00MjBkLTkyY2ItNjgyZDYyOWM4YTFjIn0.Hn_KKYk5bdh3LeQBl0A-I45Ia_vLfhNYbKamEs7yr8IJfctykMZYCXkFccIO6yX1ZE67eBy5apCMqB6beYBYR56D_McdaVCcapkp_PLKtFr6KNIfWngp6MXT28m57Vo9n6hTgDfgwVvSiGSj_8Qk0apY7LrcsrOeJO2G_fG0Ao4_K1ecd655nQ2MVSm58rMrAbRDmHBhSGbFW7MkFTKs9LtwSCYWIzrcG9083E-hST8sUN4p7p7Mw0q2_SbfDANhzk5OsnQO8jzbCDfGkqMkQLIWBmwm6FaAn8135K8trPVTGNp6dhDmOyH8oSCUl2Lf7CVLrhLd4v1ICIgHL5id6w"
									},
									{
										"key": "Content-Type",
										"value": "audio/mpeg",
										"description": "audio/mpeg",
										"type": "default"
									},
									{
										"key": "Content-Type",
										"value": "application/atom+xml",
										"type": "text",
										"disabled": true
									},
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"{{$randomLoremSentence}}\",\n    \"description\": \"{{$randomLoremSentence}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tickets-no body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s)",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during the ticket creation.\")",
											"    });",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"The request body is required.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImRlZmF1bHQifQ.eyJjbGllbnRfaWQiOiJlZjQ3NDEwMy02N2VhLTQ4MjEtYWEzOS03NTNkZjQ1Y2JkYjgiLCJpc3MiOiJodHRwczovL2F1dGgucGluZ29uZS5jb20vNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5L2FzIiwiaWF0IjoxNjM4NDM1MDAzLCJleHAiOjE2Mzg0Mzg2MDMsImF1ZCI6WyJmYWN0aW9uX3BvcnRhbCJdLCJzY29wZSI6InBvcnRhbF9hZG1pbiBvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInN1YiI6Im9rYWx5bmFfbWFzdGVyX2FkbWluIiwic2lkIjoiMDJmMDcyM2UtZjA1Ni00OWFlLWIxMDAtZDk4NzdkNGIzOGQ0IiwicG9ydGFsX3JvbGVzIjoiTWFzdGVyX0FkbWluLCBQb3J0YWxfR3JvdXBfQWRtaW4sIFBvcnRhbF9PcmdfQWRtaW4sIFBvcnRhbF9TZXJ2aWNlX0FkbWluLCBQb3J0YWxfVXNlciIsInVzZXJfaWQiOiIwYjg0YTg3Ny1jNTM1LTQyMGQtOTJjYi02ODJkNjI5YzhhMWMiLCJsYXN0X25hbWUiOiJLYWx5bmEiLCJlbWFpbCI6Im9sZWtzYW5kci5rYWx5bmFAbWV2LmNvbSIsImZpcnN0X25hbWUiOiJPbGVrc2FuZHIiLCJwb3B1bGF0aW9uIjoiNGExZTY5ZGItNDVkMS00ODA3LWE3YTctNTg0NjgzMDIwY2YwIiwiZW52IjoiNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5Iiwib3JnIjoiYzM2YTRkZGEtZjI0OS00ZTRkLTg5MjAtN2RiNWI4ZGMzYTgyIiwicDEudXNlcklkIjoiMGI4NGE4NzctYzUzNS00MjBkLTkyY2ItNjgyZDYyOWM4YTFjIn0.Hn_KKYk5bdh3LeQBl0A-I45Ia_vLfhNYbKamEs7yr8IJfctykMZYCXkFccIO6yX1ZE67eBy5apCMqB6beYBYR56D_McdaVCcapkp_PLKtFr6KNIfWngp6MXT28m57Vo9n6hTgDfgwVvSiGSj_8Qk0apY7LrcsrOeJO2G_fG0Ao4_K1ecd655nQ2MVSm58rMrAbRDmHBhSGbFW7MkFTKs9LtwSCYWIzrcG9083E-hST8sUN4p7p7Mw0q2_SbfDANhzk5OsnQO8jzbCDfGkqMkQLIWBmwm6FaAn8135K8trPVTGNp6dhDmOyH8oSCUl2Lf7CVLrhLd4v1ICIgHL5id6w"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tickets-body empty object",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during the ticket creation.\")",
											"    });",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Object to validate cannot be empty.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImRlZmF1bHQifQ.eyJjbGllbnRfaWQiOiJlZjQ3NDEwMy02N2VhLTQ4MjEtYWEzOS03NTNkZjQ1Y2JkYjgiLCJpc3MiOiJodHRwczovL2F1dGgucGluZ29uZS5jb20vNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5L2FzIiwiaWF0IjoxNjM4NDM1MDAzLCJleHAiOjE2Mzg0Mzg2MDMsImF1ZCI6WyJmYWN0aW9uX3BvcnRhbCJdLCJzY29wZSI6InBvcnRhbF9hZG1pbiBvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInN1YiI6Im9rYWx5bmFfbWFzdGVyX2FkbWluIiwic2lkIjoiMDJmMDcyM2UtZjA1Ni00OWFlLWIxMDAtZDk4NzdkNGIzOGQ0IiwicG9ydGFsX3JvbGVzIjoiTWFzdGVyX0FkbWluLCBQb3J0YWxfR3JvdXBfQWRtaW4sIFBvcnRhbF9PcmdfQWRtaW4sIFBvcnRhbF9TZXJ2aWNlX0FkbWluLCBQb3J0YWxfVXNlciIsInVzZXJfaWQiOiIwYjg0YTg3Ny1jNTM1LTQyMGQtOTJjYi02ODJkNjI5YzhhMWMiLCJsYXN0X25hbWUiOiJLYWx5bmEiLCJlbWFpbCI6Im9sZWtzYW5kci5rYWx5bmFAbWV2LmNvbSIsImZpcnN0X25hbWUiOiJPbGVrc2FuZHIiLCJwb3B1bGF0aW9uIjoiNGExZTY5ZGItNDVkMS00ODA3LWE3YTctNTg0NjgzMDIwY2YwIiwiZW52IjoiNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5Iiwib3JnIjoiYzM2YTRkZGEtZjI0OS00ZTRkLTg5MjAtN2RiNWI4ZGMzYTgyIiwicDEudXNlcklkIjoiMGI4NGE4NzctYzUzNS00MjBkLTkyY2ItNjgyZDYyOWM4YTFjIn0.Hn_KKYk5bdh3LeQBl0A-I45Ia_vLfhNYbKamEs7yr8IJfctykMZYCXkFccIO6yX1ZE67eBy5apCMqB6beYBYR56D_McdaVCcapkp_PLKtFr6KNIfWngp6MXT28m57Vo9n6hTgDfgwVvSiGSj_8Qk0apY7LrcsrOeJO2G_fG0Ao4_K1ecd655nQ2MVSm58rMrAbRDmHBhSGbFW7MkFTKs9LtwSCYWIzrcG9083E-hST8sUN4p7p7Mw0q2_SbfDANhzk5OsnQO8jzbCDfGkqMkQLIWBmwm6FaAn8135K8trPVTGNp6dhDmOyH8oSCUl2Lf7CVLrhLd4v1ICIgHL5id6w"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tickets-title empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during the ticket creation.\")",
											"    });",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Title must be at least 1 character(s).\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImRlZmF1bHQifQ.eyJjbGllbnRfaWQiOiJlZjQ3NDEwMy02N2VhLTQ4MjEtYWEzOS03NTNkZjQ1Y2JkYjgiLCJpc3MiOiJodHRwczovL2F1dGgucGluZ29uZS5jb20vNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5L2FzIiwiaWF0IjoxNjM4NDM1MDAzLCJleHAiOjE2Mzg0Mzg2MDMsImF1ZCI6WyJmYWN0aW9uX3BvcnRhbCJdLCJzY29wZSI6InBvcnRhbF9hZG1pbiBvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInN1YiI6Im9rYWx5bmFfbWFzdGVyX2FkbWluIiwic2lkIjoiMDJmMDcyM2UtZjA1Ni00OWFlLWIxMDAtZDk4NzdkNGIzOGQ0IiwicG9ydGFsX3JvbGVzIjoiTWFzdGVyX0FkbWluLCBQb3J0YWxfR3JvdXBfQWRtaW4sIFBvcnRhbF9PcmdfQWRtaW4sIFBvcnRhbF9TZXJ2aWNlX0FkbWluLCBQb3J0YWxfVXNlciIsInVzZXJfaWQiOiIwYjg0YTg3Ny1jNTM1LTQyMGQtOTJjYi02ODJkNjI5YzhhMWMiLCJsYXN0X25hbWUiOiJLYWx5bmEiLCJlbWFpbCI6Im9sZWtzYW5kci5rYWx5bmFAbWV2LmNvbSIsImZpcnN0X25hbWUiOiJPbGVrc2FuZHIiLCJwb3B1bGF0aW9uIjoiNGExZTY5ZGItNDVkMS00ODA3LWE3YTctNTg0NjgzMDIwY2YwIiwiZW52IjoiNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5Iiwib3JnIjoiYzM2YTRkZGEtZjI0OS00ZTRkLTg5MjAtN2RiNWI4ZGMzYTgyIiwicDEudXNlcklkIjoiMGI4NGE4NzctYzUzNS00MjBkLTkyY2ItNjgyZDYyOWM4YTFjIn0.Hn_KKYk5bdh3LeQBl0A-I45Ia_vLfhNYbKamEs7yr8IJfctykMZYCXkFccIO6yX1ZE67eBy5apCMqB6beYBYR56D_McdaVCcapkp_PLKtFr6KNIfWngp6MXT28m57Vo9n6hTgDfgwVvSiGSj_8Qk0apY7LrcsrOeJO2G_fG0Ao4_K1ecd655nQ2MVSm58rMrAbRDmHBhSGbFW7MkFTKs9LtwSCYWIzrcG9083E-hST8sUN4p7p7Mw0q2_SbfDANhzk5OsnQO8jzbCDfGkqMkQLIWBmwm6FaAn8135K8trPVTGNp6dhDmOyH8oSCUl2Lf7CVLrhLd4v1ICIgHL5id6w"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"\",\n    \"description\": \"{{$randomLoremSentence}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tickets-description empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during the ticket creation.\")",
											"    });",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Description must be at least 1 character(s).\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImRlZmF1bHQifQ.eyJjbGllbnRfaWQiOiJlZjQ3NDEwMy02N2VhLTQ4MjEtYWEzOS03NTNkZjQ1Y2JkYjgiLCJpc3MiOiJodHRwczovL2F1dGgucGluZ29uZS5jb20vNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5L2FzIiwiaWF0IjoxNjM4NDM1MDAzLCJleHAiOjE2Mzg0Mzg2MDMsImF1ZCI6WyJmYWN0aW9uX3BvcnRhbCJdLCJzY29wZSI6InBvcnRhbF9hZG1pbiBvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInN1YiI6Im9rYWx5bmFfbWFzdGVyX2FkbWluIiwic2lkIjoiMDJmMDcyM2UtZjA1Ni00OWFlLWIxMDAtZDk4NzdkNGIzOGQ0IiwicG9ydGFsX3JvbGVzIjoiTWFzdGVyX0FkbWluLCBQb3J0YWxfR3JvdXBfQWRtaW4sIFBvcnRhbF9PcmdfQWRtaW4sIFBvcnRhbF9TZXJ2aWNlX0FkbWluLCBQb3J0YWxfVXNlciIsInVzZXJfaWQiOiIwYjg0YTg3Ny1jNTM1LTQyMGQtOTJjYi02ODJkNjI5YzhhMWMiLCJsYXN0X25hbWUiOiJLYWx5bmEiLCJlbWFpbCI6Im9sZWtzYW5kci5rYWx5bmFAbWV2LmNvbSIsImZpcnN0X25hbWUiOiJPbGVrc2FuZHIiLCJwb3B1bGF0aW9uIjoiNGExZTY5ZGItNDVkMS00ODA3LWE3YTctNTg0NjgzMDIwY2YwIiwiZW52IjoiNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5Iiwib3JnIjoiYzM2YTRkZGEtZjI0OS00ZTRkLTg5MjAtN2RiNWI4ZGMzYTgyIiwicDEudXNlcklkIjoiMGI4NGE4NzctYzUzNS00MjBkLTkyY2ItNjgyZDYyOWM4YTFjIn0.Hn_KKYk5bdh3LeQBl0A-I45Ia_vLfhNYbKamEs7yr8IJfctykMZYCXkFccIO6yX1ZE67eBy5apCMqB6beYBYR56D_McdaVCcapkp_PLKtFr6KNIfWngp6MXT28m57Vo9n6hTgDfgwVvSiGSj_8Qk0apY7LrcsrOeJO2G_fG0Ao4_K1ecd655nQ2MVSm58rMrAbRDmHBhSGbFW7MkFTKs9LtwSCYWIzrcG9083E-hST8sUN4p7p7Mw0q2_SbfDANhzk5OsnQO8jzbCDfGkqMkQLIWBmwm6FaAn8135K8trPVTGNp6dhDmOyH8oSCUl2Lf7CVLrhLd4v1ICIgHL5id6w"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"{{$randomLoremSentence}}\",\n    \"description\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tickets-title=null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during the ticket creation.\")",
											"    });",
											"    ",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Expected title to be a String.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImRlZmF1bHQifQ.eyJjbGllbnRfaWQiOiJlZjQ3NDEwMy02N2VhLTQ4MjEtYWEzOS03NTNkZjQ1Y2JkYjgiLCJpc3MiOiJodHRwczovL2F1dGgucGluZ29uZS5jb20vNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5L2FzIiwiaWF0IjoxNjM4NDM1MDAzLCJleHAiOjE2Mzg0Mzg2MDMsImF1ZCI6WyJmYWN0aW9uX3BvcnRhbCJdLCJzY29wZSI6InBvcnRhbF9hZG1pbiBvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInN1YiI6Im9rYWx5bmFfbWFzdGVyX2FkbWluIiwic2lkIjoiMDJmMDcyM2UtZjA1Ni00OWFlLWIxMDAtZDk4NzdkNGIzOGQ0IiwicG9ydGFsX3JvbGVzIjoiTWFzdGVyX0FkbWluLCBQb3J0YWxfR3JvdXBfQWRtaW4sIFBvcnRhbF9PcmdfQWRtaW4sIFBvcnRhbF9TZXJ2aWNlX0FkbWluLCBQb3J0YWxfVXNlciIsInVzZXJfaWQiOiIwYjg0YTg3Ny1jNTM1LTQyMGQtOTJjYi02ODJkNjI5YzhhMWMiLCJsYXN0X25hbWUiOiJLYWx5bmEiLCJlbWFpbCI6Im9sZWtzYW5kci5rYWx5bmFAbWV2LmNvbSIsImZpcnN0X25hbWUiOiJPbGVrc2FuZHIiLCJwb3B1bGF0aW9uIjoiNGExZTY5ZGItNDVkMS00ODA3LWE3YTctNTg0NjgzMDIwY2YwIiwiZW52IjoiNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5Iiwib3JnIjoiYzM2YTRkZGEtZjI0OS00ZTRkLTg5MjAtN2RiNWI4ZGMzYTgyIiwicDEudXNlcklkIjoiMGI4NGE4NzctYzUzNS00MjBkLTkyY2ItNjgyZDYyOWM4YTFjIn0.Hn_KKYk5bdh3LeQBl0A-I45Ia_vLfhNYbKamEs7yr8IJfctykMZYCXkFccIO6yX1ZE67eBy5apCMqB6beYBYR56D_McdaVCcapkp_PLKtFr6KNIfWngp6MXT28m57Vo9n6hTgDfgwVvSiGSj_8Qk0apY7LrcsrOeJO2G_fG0Ao4_K1ecd655nQ2MVSm58rMrAbRDmHBhSGbFW7MkFTKs9LtwSCYWIzrcG9083E-hST8sUN4p7p7Mw0q2_SbfDANhzk5OsnQO8jzbCDfGkqMkQLIWBmwm6FaAn8135K8trPVTGNp6dhDmOyH8oSCUl2Lf7CVLrhLd4v1ICIgHL5id6w"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": null,\n    \"description\": \"{{$randomLoremSentence}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tickets-description=null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during the ticket creation.\")",
											"    });",
											"    ",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Expected description to be a String.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImRlZmF1bHQifQ.eyJjbGllbnRfaWQiOiJlZjQ3NDEwMy02N2VhLTQ4MjEtYWEzOS03NTNkZjQ1Y2JkYjgiLCJpc3MiOiJodHRwczovL2F1dGgucGluZ29uZS5jb20vNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5L2FzIiwiaWF0IjoxNjM4NDM1MDAzLCJleHAiOjE2Mzg0Mzg2MDMsImF1ZCI6WyJmYWN0aW9uX3BvcnRhbCJdLCJzY29wZSI6InBvcnRhbF9hZG1pbiBvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInN1YiI6Im9rYWx5bmFfbWFzdGVyX2FkbWluIiwic2lkIjoiMDJmMDcyM2UtZjA1Ni00OWFlLWIxMDAtZDk4NzdkNGIzOGQ0IiwicG9ydGFsX3JvbGVzIjoiTWFzdGVyX0FkbWluLCBQb3J0YWxfR3JvdXBfQWRtaW4sIFBvcnRhbF9PcmdfQWRtaW4sIFBvcnRhbF9TZXJ2aWNlX0FkbWluLCBQb3J0YWxfVXNlciIsInVzZXJfaWQiOiIwYjg0YTg3Ny1jNTM1LTQyMGQtOTJjYi02ODJkNjI5YzhhMWMiLCJsYXN0X25hbWUiOiJLYWx5bmEiLCJlbWFpbCI6Im9sZWtzYW5kci5rYWx5bmFAbWV2LmNvbSIsImZpcnN0X25hbWUiOiJPbGVrc2FuZHIiLCJwb3B1bGF0aW9uIjoiNGExZTY5ZGItNDVkMS00ODA3LWE3YTctNTg0NjgzMDIwY2YwIiwiZW52IjoiNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5Iiwib3JnIjoiYzM2YTRkZGEtZjI0OS00ZTRkLTg5MjAtN2RiNWI4ZGMzYTgyIiwicDEudXNlcklkIjoiMGI4NGE4NzctYzUzNS00MjBkLTkyY2ItNjgyZDYyOWM4YTFjIn0.Hn_KKYk5bdh3LeQBl0A-I45Ia_vLfhNYbKamEs7yr8IJfctykMZYCXkFccIO6yX1ZE67eBy5apCMqB6beYBYR56D_McdaVCcapkp_PLKtFr6KNIfWngp6MXT28m57Vo9n6hTgDfgwVvSiGSj_8Qk0apY7LrcsrOeJO2G_fG0Ao4_K1ecd655nQ2MVSm58rMrAbRDmHBhSGbFW7MkFTKs9LtwSCYWIzrcG9083E-hST8sUN4p7p7Mw0q2_SbfDANhzk5OsnQO8jzbCDfGkqMkQLIWBmwm6FaAn8135K8trPVTGNp6dhDmOyH8oSCUl2Lf7CVLrhLd4v1ICIgHL5id6w"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"{{$randomLoremSentence}}\",\n    \"description\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tickets-title object",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during the ticket creation.\")",
											"    });",
											"    ",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Expected title to be a String.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImRlZmF1bHQifQ.eyJjbGllbnRfaWQiOiJlZjQ3NDEwMy02N2VhLTQ4MjEtYWEzOS03NTNkZjQ1Y2JkYjgiLCJpc3MiOiJodHRwczovL2F1dGgucGluZ29uZS5jb20vNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5L2FzIiwiaWF0IjoxNjM4NDM1MDAzLCJleHAiOjE2Mzg0Mzg2MDMsImF1ZCI6WyJmYWN0aW9uX3BvcnRhbCJdLCJzY29wZSI6InBvcnRhbF9hZG1pbiBvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInN1YiI6Im9rYWx5bmFfbWFzdGVyX2FkbWluIiwic2lkIjoiMDJmMDcyM2UtZjA1Ni00OWFlLWIxMDAtZDk4NzdkNGIzOGQ0IiwicG9ydGFsX3JvbGVzIjoiTWFzdGVyX0FkbWluLCBQb3J0YWxfR3JvdXBfQWRtaW4sIFBvcnRhbF9PcmdfQWRtaW4sIFBvcnRhbF9TZXJ2aWNlX0FkbWluLCBQb3J0YWxfVXNlciIsInVzZXJfaWQiOiIwYjg0YTg3Ny1jNTM1LTQyMGQtOTJjYi02ODJkNjI5YzhhMWMiLCJsYXN0X25hbWUiOiJLYWx5bmEiLCJlbWFpbCI6Im9sZWtzYW5kci5rYWx5bmFAbWV2LmNvbSIsImZpcnN0X25hbWUiOiJPbGVrc2FuZHIiLCJwb3B1bGF0aW9uIjoiNGExZTY5ZGItNDVkMS00ODA3LWE3YTctNTg0NjgzMDIwY2YwIiwiZW52IjoiNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5Iiwib3JnIjoiYzM2YTRkZGEtZjI0OS00ZTRkLTg5MjAtN2RiNWI4ZGMzYTgyIiwicDEudXNlcklkIjoiMGI4NGE4NzctYzUzNS00MjBkLTkyY2ItNjgyZDYyOWM4YTFjIn0.Hn_KKYk5bdh3LeQBl0A-I45Ia_vLfhNYbKamEs7yr8IJfctykMZYCXkFccIO6yX1ZE67eBy5apCMqB6beYBYR56D_McdaVCcapkp_PLKtFr6KNIfWngp6MXT28m57Vo9n6hTgDfgwVvSiGSj_8Qk0apY7LrcsrOeJO2G_fG0Ao4_K1ecd655nQ2MVSm58rMrAbRDmHBhSGbFW7MkFTKs9LtwSCYWIzrcG9083E-hST8sUN4p7p7Mw0q2_SbfDANhzk5OsnQO8jzbCDfGkqMkQLIWBmwm6FaAn8135K8trPVTGNp6dhDmOyH8oSCUl2Lf7CVLrhLd4v1ICIgHL5id6w"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": {\"22\":\"malware\"},\n    \"description\": \"{{$randomLoremSentence}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tickets-description object",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during the ticket creation.\")",
											"    });",
											"    ",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Expected description to be a String.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImRlZmF1bHQifQ.eyJjbGllbnRfaWQiOiJlZjQ3NDEwMy02N2VhLTQ4MjEtYWEzOS03NTNkZjQ1Y2JkYjgiLCJpc3MiOiJodHRwczovL2F1dGgucGluZ29uZS5jb20vNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5L2FzIiwiaWF0IjoxNjM4NDM1MDAzLCJleHAiOjE2Mzg0Mzg2MDMsImF1ZCI6WyJmYWN0aW9uX3BvcnRhbCJdLCJzY29wZSI6InBvcnRhbF9hZG1pbiBvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInN1YiI6Im9rYWx5bmFfbWFzdGVyX2FkbWluIiwic2lkIjoiMDJmMDcyM2UtZjA1Ni00OWFlLWIxMDAtZDk4NzdkNGIzOGQ0IiwicG9ydGFsX3JvbGVzIjoiTWFzdGVyX0FkbWluLCBQb3J0YWxfR3JvdXBfQWRtaW4sIFBvcnRhbF9PcmdfQWRtaW4sIFBvcnRhbF9TZXJ2aWNlX0FkbWluLCBQb3J0YWxfVXNlciIsInVzZXJfaWQiOiIwYjg0YTg3Ny1jNTM1LTQyMGQtOTJjYi02ODJkNjI5YzhhMWMiLCJsYXN0X25hbWUiOiJLYWx5bmEiLCJlbWFpbCI6Im9sZWtzYW5kci5rYWx5bmFAbWV2LmNvbSIsImZpcnN0X25hbWUiOiJPbGVrc2FuZHIiLCJwb3B1bGF0aW9uIjoiNGExZTY5ZGItNDVkMS00ODA3LWE3YTctNTg0NjgzMDIwY2YwIiwiZW52IjoiNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5Iiwib3JnIjoiYzM2YTRkZGEtZjI0OS00ZTRkLTg5MjAtN2RiNWI4ZGMzYTgyIiwicDEudXNlcklkIjoiMGI4NGE4NzctYzUzNS00MjBkLTkyY2ItNjgyZDYyOWM4YTFjIn0.Hn_KKYk5bdh3LeQBl0A-I45Ia_vLfhNYbKamEs7yr8IJfctykMZYCXkFccIO6yX1ZE67eBy5apCMqB6beYBYR56D_McdaVCcapkp_PLKtFr6KNIfWngp6MXT28m57Vo9n6hTgDfgwVvSiGSj_8Qk0apY7LrcsrOeJO2G_fG0Ao4_K1ecd655nQ2MVSm58rMrAbRDmHBhSGbFW7MkFTKs9LtwSCYWIzrcG9083E-hST8sUN4p7p7Mw0q2_SbfDANhzk5OsnQO8jzbCDfGkqMkQLIWBmwm6FaAn8135K8trPVTGNp6dhDmOyH8oSCUl2Lf7CVLrhLd4v1ICIgHL5id6w"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"{{$randomLoremSentence}}\",\n    \"description\": {\"22\":\"malware\"}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tickets-title 161char",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during the ticket creation.\")",
											"    });",
											"    ",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Title must be at most 160 character(s).\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImRlZmF1bHQifQ.eyJjbGllbnRfaWQiOiJlZjQ3NDEwMy02N2VhLTQ4MjEtYWEzOS03NTNkZjQ1Y2JkYjgiLCJpc3MiOiJodHRwczovL2F1dGgucGluZ29uZS5jb20vNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5L2FzIiwiaWF0IjoxNjM4NDM1MDAzLCJleHAiOjE2Mzg0Mzg2MDMsImF1ZCI6WyJmYWN0aW9uX3BvcnRhbCJdLCJzY29wZSI6InBvcnRhbF9hZG1pbiBvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInN1YiI6Im9rYWx5bmFfbWFzdGVyX2FkbWluIiwic2lkIjoiMDJmMDcyM2UtZjA1Ni00OWFlLWIxMDAtZDk4NzdkNGIzOGQ0IiwicG9ydGFsX3JvbGVzIjoiTWFzdGVyX0FkbWluLCBQb3J0YWxfR3JvdXBfQWRtaW4sIFBvcnRhbF9PcmdfQWRtaW4sIFBvcnRhbF9TZXJ2aWNlX0FkbWluLCBQb3J0YWxfVXNlciIsInVzZXJfaWQiOiIwYjg0YTg3Ny1jNTM1LTQyMGQtOTJjYi02ODJkNjI5YzhhMWMiLCJsYXN0X25hbWUiOiJLYWx5bmEiLCJlbWFpbCI6Im9sZWtzYW5kci5rYWx5bmFAbWV2LmNvbSIsImZpcnN0X25hbWUiOiJPbGVrc2FuZHIiLCJwb3B1bGF0aW9uIjoiNGExZTY5ZGItNDVkMS00ODA3LWE3YTctNTg0NjgzMDIwY2YwIiwiZW52IjoiNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5Iiwib3JnIjoiYzM2YTRkZGEtZjI0OS00ZTRkLTg5MjAtN2RiNWI4ZGMzYTgyIiwicDEudXNlcklkIjoiMGI4NGE4NzctYzUzNS00MjBkLTkyY2ItNjgyZDYyOWM4YTFjIn0.Hn_KKYk5bdh3LeQBl0A-I45Ia_vLfhNYbKamEs7yr8IJfctykMZYCXkFccIO6yX1ZE67eBy5apCMqB6beYBYR56D_McdaVCcapkp_PLKtFr6KNIfWngp6MXT28m57Vo9n6hTgDfgwVvSiGSj_8Qk0apY7LrcsrOeJO2G_fG0Ao4_K1ecd655nQ2MVSm58rMrAbRDmHBhSGbFW7MkFTKs9LtwSCYWIzrcG9083E-hST8sUN4p7p7Mw0q2_SbfDANhzk5OsnQO8jzbCDfGkqMkQLIWBmwm6FaAn8135K8trPVTGNp6dhDmOyH8oSCUl2Lf7CVLrhLd4v1ICIgHL5id6w"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"{{161charText}}\",\n    \"description\": \"{{$randomLoremSentence}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tickets-description 256char",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during the ticket creation.\")",
											"    });",
											"    ",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Description must be at most 255 character(s).\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImRlZmF1bHQifQ.eyJjbGllbnRfaWQiOiJlZjQ3NDEwMy02N2VhLTQ4MjEtYWEzOS03NTNkZjQ1Y2JkYjgiLCJpc3MiOiJodHRwczovL2F1dGgucGluZ29uZS5jb20vNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5L2FzIiwiaWF0IjoxNjM4NDM1MDAzLCJleHAiOjE2Mzg0Mzg2MDMsImF1ZCI6WyJmYWN0aW9uX3BvcnRhbCJdLCJzY29wZSI6InBvcnRhbF9hZG1pbiBvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInN1YiI6Im9rYWx5bmFfbWFzdGVyX2FkbWluIiwic2lkIjoiMDJmMDcyM2UtZjA1Ni00OWFlLWIxMDAtZDk4NzdkNGIzOGQ0IiwicG9ydGFsX3JvbGVzIjoiTWFzdGVyX0FkbWluLCBQb3J0YWxfR3JvdXBfQWRtaW4sIFBvcnRhbF9PcmdfQWRtaW4sIFBvcnRhbF9TZXJ2aWNlX0FkbWluLCBQb3J0YWxfVXNlciIsInVzZXJfaWQiOiIwYjg0YTg3Ny1jNTM1LTQyMGQtOTJjYi02ODJkNjI5YzhhMWMiLCJsYXN0X25hbWUiOiJLYWx5bmEiLCJlbWFpbCI6Im9sZWtzYW5kci5rYWx5bmFAbWV2LmNvbSIsImZpcnN0X25hbWUiOiJPbGVrc2FuZHIiLCJwb3B1bGF0aW9uIjoiNGExZTY5ZGItNDVkMS00ODA3LWE3YTctNTg0NjgzMDIwY2YwIiwiZW52IjoiNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5Iiwib3JnIjoiYzM2YTRkZGEtZjI0OS00ZTRkLTg5MjAtN2RiNWI4ZGMzYTgyIiwicDEudXNlcklkIjoiMGI4NGE4NzctYzUzNS00MjBkLTkyY2ItNjgyZDYyOWM4YTFjIn0.Hn_KKYk5bdh3LeQBl0A-I45Ia_vLfhNYbKamEs7yr8IJfctykMZYCXkFccIO6yX1ZE67eBy5apCMqB6beYBYR56D_McdaVCcapkp_PLKtFr6KNIfWngp6MXT28m57Vo9n6hTgDfgwVvSiGSj_8Qk0apY7LrcsrOeJO2G_fG0Ao4_K1ecd655nQ2MVSm58rMrAbRDmHBhSGbFW7MkFTKs9LtwSCYWIzrcG9083E-hST8sUN4p7p7Mw0q2_SbfDANhzk5OsnQO8jzbCDfGkqMkQLIWBmwm6FaAn8135K8trPVTGNp6dhDmOyH8oSCUl2Lf7CVLrhLd4v1ICIgHL5id6w"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"{{$randomLoremSentence}}\",\n    \"description\": \"{{256charText}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tickets-title wrong title field name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during the ticket creation.\")",
											"    });",
											"    ",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Title field is required.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImRlZmF1bHQifQ.eyJjbGllbnRfaWQiOiJlZjQ3NDEwMy02N2VhLTQ4MjEtYWEzOS03NTNkZjQ1Y2JkYjgiLCJpc3MiOiJodHRwczovL2F1dGgucGluZ29uZS5jb20vNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5L2FzIiwiaWF0IjoxNjM4NDM1MDAzLCJleHAiOjE2Mzg0Mzg2MDMsImF1ZCI6WyJmYWN0aW9uX3BvcnRhbCJdLCJzY29wZSI6InBvcnRhbF9hZG1pbiBvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInN1YiI6Im9rYWx5bmFfbWFzdGVyX2FkbWluIiwic2lkIjoiMDJmMDcyM2UtZjA1Ni00OWFlLWIxMDAtZDk4NzdkNGIzOGQ0IiwicG9ydGFsX3JvbGVzIjoiTWFzdGVyX0FkbWluLCBQb3J0YWxfR3JvdXBfQWRtaW4sIFBvcnRhbF9PcmdfQWRtaW4sIFBvcnRhbF9TZXJ2aWNlX0FkbWluLCBQb3J0YWxfVXNlciIsInVzZXJfaWQiOiIwYjg0YTg3Ny1jNTM1LTQyMGQtOTJjYi02ODJkNjI5YzhhMWMiLCJsYXN0X25hbWUiOiJLYWx5bmEiLCJlbWFpbCI6Im9sZWtzYW5kci5rYWx5bmFAbWV2LmNvbSIsImZpcnN0X25hbWUiOiJPbGVrc2FuZHIiLCJwb3B1bGF0aW9uIjoiNGExZTY5ZGItNDVkMS00ODA3LWE3YTctNTg0NjgzMDIwY2YwIiwiZW52IjoiNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5Iiwib3JnIjoiYzM2YTRkZGEtZjI0OS00ZTRkLTg5MjAtN2RiNWI4ZGMzYTgyIiwicDEudXNlcklkIjoiMGI4NGE4NzctYzUzNS00MjBkLTkyY2ItNjgyZDYyOWM4YTFjIn0.Hn_KKYk5bdh3LeQBl0A-I45Ia_vLfhNYbKamEs7yr8IJfctykMZYCXkFccIO6yX1ZE67eBy5apCMqB6beYBYR56D_McdaVCcapkp_PLKtFr6KNIfWngp6MXT28m57Vo9n6hTgDfgwVvSiGSj_8Qk0apY7LrcsrOeJO2G_fG0Ao4_K1ecd655nQ2MVSm58rMrAbRDmHBhSGbFW7MkFTKs9LtwSCYWIzrcG9083E-hST8sUN4p7p7Mw0q2_SbfDANhzk5OsnQO8jzbCDfGkqMkQLIWBmwm6FaAn8135K8trPVTGNp6dhDmOyH8oSCUl2Lf7CVLrhLd4v1ICIgHL5id6w"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"titleT\": \"{{$randomLoremSentence}}\",\n    \"description\": \"{{$randomLoremSentence}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tickets-title wrong description field name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during the ticket creation.\")",
											"    });",
											"    ",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Description field is required.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImRlZmF1bHQifQ.eyJjbGllbnRfaWQiOiJlZjQ3NDEwMy02N2VhLTQ4MjEtYWEzOS03NTNkZjQ1Y2JkYjgiLCJpc3MiOiJodHRwczovL2F1dGgucGluZ29uZS5jb20vNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5L2FzIiwiaWF0IjoxNjM4NDM1MDAzLCJleHAiOjE2Mzg0Mzg2MDMsImF1ZCI6WyJmYWN0aW9uX3BvcnRhbCJdLCJzY29wZSI6InBvcnRhbF9hZG1pbiBvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInN1YiI6Im9rYWx5bmFfbWFzdGVyX2FkbWluIiwic2lkIjoiMDJmMDcyM2UtZjA1Ni00OWFlLWIxMDAtZDk4NzdkNGIzOGQ0IiwicG9ydGFsX3JvbGVzIjoiTWFzdGVyX0FkbWluLCBQb3J0YWxfR3JvdXBfQWRtaW4sIFBvcnRhbF9PcmdfQWRtaW4sIFBvcnRhbF9TZXJ2aWNlX0FkbWluLCBQb3J0YWxfVXNlciIsInVzZXJfaWQiOiIwYjg0YTg3Ny1jNTM1LTQyMGQtOTJjYi02ODJkNjI5YzhhMWMiLCJsYXN0X25hbWUiOiJLYWx5bmEiLCJlbWFpbCI6Im9sZWtzYW5kci5rYWx5bmFAbWV2LmNvbSIsImZpcnN0X25hbWUiOiJPbGVrc2FuZHIiLCJwb3B1bGF0aW9uIjoiNGExZTY5ZGItNDVkMS00ODA3LWE3YTctNTg0NjgzMDIwY2YwIiwiZW52IjoiNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5Iiwib3JnIjoiYzM2YTRkZGEtZjI0OS00ZTRkLTg5MjAtN2RiNWI4ZGMzYTgyIiwicDEudXNlcklkIjoiMGI4NGE4NzctYzUzNS00MjBkLTkyY2ItNjgyZDYyOWM4YTFjIn0.Hn_KKYk5bdh3LeQBl0A-I45Ia_vLfhNYbKamEs7yr8IJfctykMZYCXkFccIO6yX1ZE67eBy5apCMqB6beYBYR56D_McdaVCcapkp_PLKtFr6KNIfWngp6MXT28m57Vo9n6hTgDfgwVvSiGSj_8Qk0apY7LrcsrOeJO2G_fG0Ao4_K1ecd655nQ2MVSm58rMrAbRDmHBhSGbFW7MkFTKs9LtwSCYWIzrcG9083E-hST8sUN4p7p7Mw0q2_SbfDANhzk5OsnQO8jzbCDfGkqMkQLIWBmwm6FaAn8135K8trPVTGNp6dhDmOyH8oSCUl2Lf7CVLrhLd4v1ICIgHL5id6w"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"{{$randomLoremSentence}}\",\n    \"subscription\": \"{{$randomLoremSentence}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tickets-title with unexpected char",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during the ticket creation.\")",
											"    });",
											"    ",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"The request body is not valid.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImRlZmF1bHQifQ.eyJjbGllbnRfaWQiOiJlZjQ3NDEwMy02N2VhLTQ4MjEtYWEzOS03NTNkZjQ1Y2JkYjgiLCJpc3MiOiJodHRwczovL2F1dGgucGluZ29uZS5jb20vNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5L2FzIiwiaWF0IjoxNjM4NDM1MDAzLCJleHAiOjE2Mzg0Mzg2MDMsImF1ZCI6WyJmYWN0aW9uX3BvcnRhbCJdLCJzY29wZSI6InBvcnRhbF9hZG1pbiBvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInN1YiI6Im9rYWx5bmFfbWFzdGVyX2FkbWluIiwic2lkIjoiMDJmMDcyM2UtZjA1Ni00OWFlLWIxMDAtZDk4NzdkNGIzOGQ0IiwicG9ydGFsX3JvbGVzIjoiTWFzdGVyX0FkbWluLCBQb3J0YWxfR3JvdXBfQWRtaW4sIFBvcnRhbF9PcmdfQWRtaW4sIFBvcnRhbF9TZXJ2aWNlX0FkbWluLCBQb3J0YWxfVXNlciIsInVzZXJfaWQiOiIwYjg0YTg3Ny1jNTM1LTQyMGQtOTJjYi02ODJkNjI5YzhhMWMiLCJsYXN0X25hbWUiOiJLYWx5bmEiLCJlbWFpbCI6Im9sZWtzYW5kci5rYWx5bmFAbWV2LmNvbSIsImZpcnN0X25hbWUiOiJPbGVrc2FuZHIiLCJwb3B1bGF0aW9uIjoiNGExZTY5ZGItNDVkMS00ODA3LWE3YTctNTg0NjgzMDIwY2YwIiwiZW52IjoiNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5Iiwib3JnIjoiYzM2YTRkZGEtZjI0OS00ZTRkLTg5MjAtN2RiNWI4ZGMzYTgyIiwicDEudXNlcklkIjoiMGI4NGE4NzctYzUzNS00MjBkLTkyY2ItNjgyZDYyOWM4YTFjIn0.Hn_KKYk5bdh3LeQBl0A-I45Ia_vLfhNYbKamEs7yr8IJfctykMZYCXkFccIO6yX1ZE67eBy5apCMqB6beYBYR56D_McdaVCcapkp_PLKtFr6KNIfWngp6MXT28m57Vo9n6hTgDfgwVvSiGSj_8Qk0apY7LrcsrOeJO2G_fG0Ao4_K1ecd655nQ2MVSm58rMrAbRDmHBhSGbFW7MkFTKs9LtwSCYWIzrcG9083E-hST8sUN4p7p7Mw0q2_SbfDANhzk5OsnQO8jzbCDfGkqMkQLIWBmwm6FaAn8135K8trPVTGNp6dhDmOyH8oSCUl2Lf7CVLrhLd4v1ICIgHL5id6w"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"\\1/\",\n    \"description\": \"{{$randomLoremParagraph}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tickets-description with unexpected char",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during the ticket creation.\")",
											"    });",
											"    ",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"The request body is not valid.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImRlZmF1bHQifQ.eyJjbGllbnRfaWQiOiJlZjQ3NDEwMy02N2VhLTQ4MjEtYWEzOS03NTNkZjQ1Y2JkYjgiLCJpc3MiOiJodHRwczovL2F1dGgucGluZ29uZS5jb20vNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5L2FzIiwiaWF0IjoxNjM4NDM1MDAzLCJleHAiOjE2Mzg0Mzg2MDMsImF1ZCI6WyJmYWN0aW9uX3BvcnRhbCJdLCJzY29wZSI6InBvcnRhbF9hZG1pbiBvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInN1YiI6Im9rYWx5bmFfbWFzdGVyX2FkbWluIiwic2lkIjoiMDJmMDcyM2UtZjA1Ni00OWFlLWIxMDAtZDk4NzdkNGIzOGQ0IiwicG9ydGFsX3JvbGVzIjoiTWFzdGVyX0FkbWluLCBQb3J0YWxfR3JvdXBfQWRtaW4sIFBvcnRhbF9PcmdfQWRtaW4sIFBvcnRhbF9TZXJ2aWNlX0FkbWluLCBQb3J0YWxfVXNlciIsInVzZXJfaWQiOiIwYjg0YTg3Ny1jNTM1LTQyMGQtOTJjYi02ODJkNjI5YzhhMWMiLCJsYXN0X25hbWUiOiJLYWx5bmEiLCJlbWFpbCI6Im9sZWtzYW5kci5rYWx5bmFAbWV2LmNvbSIsImZpcnN0X25hbWUiOiJPbGVrc2FuZHIiLCJwb3B1bGF0aW9uIjoiNGExZTY5ZGItNDVkMS00ODA3LWE3YTctNTg0NjgzMDIwY2YwIiwiZW52IjoiNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5Iiwib3JnIjoiYzM2YTRkZGEtZjI0OS00ZTRkLTg5MjAtN2RiNWI4ZGMzYTgyIiwicDEudXNlcklkIjoiMGI4NGE4NzctYzUzNS00MjBkLTkyY2ItNjgyZDYyOWM4YTFjIn0.Hn_KKYk5bdh3LeQBl0A-I45Ia_vLfhNYbKamEs7yr8IJfctykMZYCXkFccIO6yX1ZE67eBy5apCMqB6beYBYR56D_McdaVCcapkp_PLKtFr6KNIfWngp6MXT28m57Vo9n6hTgDfgwVvSiGSj_8Qk0apY7LrcsrOeJO2G_fG0Ao4_K1ecd655nQ2MVSm58rMrAbRDmHBhSGbFW7MkFTKs9LtwSCYWIzrcG9083E-hST8sUN4p7p7Mw0q2_SbfDANhzk5OsnQO8jzbCDfGkqMkQLIWBmwm6FaAn8135K8trPVTGNp6dhDmOyH8oSCUl2Lf7CVLrhLd4v1ICIgHL5id6w"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"{{$randomLoremSentence}}\",\n    \"description\": \"\\$*&(YH/\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST/v1/tickets/{{ticketId}}/comments",
					"item": [
						{
							"name": "Comments-wrong Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Content-Type parameter is not valid.\")",
											"    });",
											"    pm.test(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"Unsupported content type\")",
											"    });",
											"",
											"     pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-yaml",
										"type": "default"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"{{$randomLoremSentence}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/comments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "*Comments-ticketId from anotherOrg",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(404)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during comment adding.\")",
											"    });",
											"    pm.test.skip(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Ticket with the requested id is not found.\")",
											"    });",
											"",
											"     pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"{{$randomLoremSentence}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{anotherOrgTicketId}}/comments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{anotherOrgTicketId}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "*Comments-no body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during comment adding.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"The request body is required.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/comments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "*Comments-body empty object",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during comment adding.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Object to validate cannot be empty.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/comments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "*Comments-0chars in comment text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during ticket comment adding.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Comment text should be between 1 and 255 characters\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/comments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "*Comments-256chars in comment text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during ticket comment adding.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Comment text should be between 1 and 255 characters.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"{{256charText}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/comments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "*Comments-wrong body field name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during comment adding.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Text field is required.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"test\": \"{{$randomLoremSentence}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/comments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"comments"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST/v1/tickets/{{ticketId}}/attachments",
					"item": [
						{
							"name": "Attachments-ticketId from anotherOrg",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"",
											"    let res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(404)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Ticket with the requested id is not found.\")",
											"    });",
											"    pm.test.skip(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the uploading ticket attachments.\")",
											"    });",
											"",
											"     pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "gif_avatar.gif"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{anotherOrgTicketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{anotherOrgTicketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-typo in the path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    let res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Bad Request.\")",
											"    });",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Bad Request. Invalid signature.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.be.equal(\"Invalid request signature.\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "docx_1,1Mb.docx"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachmentsccc",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachmentsccc"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-x-www-form-urlencoded body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Content-Type parameter is not valid.\")",
											"    });",
											"    pm.test(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"Unsupported content type\")",
											"    });",
											"",
											"     pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "body",
											"value": "uploadedFile",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-binary file in body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during attachment adding.\")",
											"    });",
											"    pm.test(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Unsupported body type.\")",
											"    });",
											"",
											"     pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "jpeg_avatar5.jpeg"
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-GraphQL query in body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during attachment adding.\")",
											"    });",
											"    pm.test(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"Usupported body type.\")",
											"    });",
											"",
											"     pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n  __schema {\n    types {\n      name\n      fields {\n        name\n        description\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-JSON raw in body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during attachment adding.\")",
											"    });",
											"    pm.test(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"The request body is required.\")",
											"    });",
											"",
											"     pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "multipart/form-data; boundary=<calculated when request is sent>",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"value\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "*Attachments-empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test.skip(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during comment adding.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"The request body is required.\")",
											"    });",
											"",
											"    pm.test.skip(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "multipart/form-data; boundary=<calculated when request is sent>",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-header wrong Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    let res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Content-Type parameter is not valid.\")",
											"    });",
											"    pm.test(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"Unsupported content type\")",
											"    });",
											"",
											"     pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "default",
										"disabled": true
									},
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/x-ecmascript",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "svg_3Mb.svg"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-body file > 5Mb",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 413\", function () {",
											"    pm.response.to.have.status(413);",
											"let res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(413)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Request payload is too large.\")",
											"    });",
											"    pm.test.skip(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Maximum request payload size is 4mb.\")",
											"    });",
											"",
											"    pm.test.skip(\"Details message text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Exceeded the maximum request payload size of the body which is 4mb.\")",
											"    });",
											"",
											"     pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "5Mb.png",
											"type": "file",
											"src": "png_5Mb.png"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-body \".a\" file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", function () {",
											"    pm.response.to.have.status(415);",
											"",
											"    let res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(415)",
											"    });  ",
											"",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(pm.collectionVariables.get('restrictedAttachmentError'))",
											"    });",
											"",
											"    pm.test(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"File has unsupported extension\")",
											"    });",
											"    ",
											"     pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": ".a",
											"type": "file",
											"src": "sample.a"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-body \".bat\" file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", function () {",
											"    pm.response.to.have.status(415);",
											"",
											"    let res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(415)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(pm.environment.get('restrictedAttachmentError'))",
											"    });",
											"",
											"    pm.test(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"File has unsupported extension\")",
											"    });",
											"",
											"     pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "sample.bat"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-body \".bin\" file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", function () {",
											"    pm.response.to.have.status(415);",
											"",
											"    let res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(415)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(pm.environment.get('restrictedAttachmentError'))",
											"    });",
											"",
											"    pm.test(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"File has unsupported extension\")",
											"    });",
											"",
											"     pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "sample.bin"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-body \".c\" file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", function () {",
											"    pm.response.to.have.status(415);",
											"",
											"    let res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(415)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(pm.environment.get('restrictedAttachmentError'))",
											"    });",
											"    pm.test(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"File has unsupported extension\")",
											"    });",
											"",
											"     pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "sample.c"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-body \".cmd\" file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", function () {",
											"    pm.response.to.have.status(415);",
											"",
											"    let res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(415)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(pm.environment.get('restrictedAttachmentError'))",
											"    });",
											"    pm.test(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"File has unsupported extension\")",
											"    });",
											"",
											"     pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "sample.cmd"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-body \".com\" file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", function () {",
											"    pm.response.to.have.status(415);",
											"",
											"    let res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(415)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(pm.environment.get('restrictedAttachmentError'))",
											"    });",
											"",
											"    pm.test(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"File has unsupported extension\")",
											"    });",
											"",
											"     pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "sample.com"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-body \".deb\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", function () {",
											"    pm.response.to.have.status(415);",
											"",
											"    let res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(415)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(pm.environment.get('restrictedAttachmentError'))",
											"    });",
											"",
											"    pm.test(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"File has unsupported extension\")",
											"    });",
											"",
											"     pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "sample.deb"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-body \".dll\" file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", function () {",
											"    pm.response.to.have.status(415);",
											"",
											"    let res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(415)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(pm.environment.get('restrictedAttachmentError'))",
											"    });",
											"",
											"    pm.test(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"File has unsupported extension\")",
											"    });",
											"",
											"     pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "sample.dll"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-body \".dmg\" file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", function () {",
											"    pm.response.to.have.status(415);",
											"",
											"    let res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(415)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(pm.environment.get('restrictedAttachmentError'))",
											"    });",
											"    ",
											"    pm.test(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"File has unsupported extension\")",
											"    });",
											"",
											"     pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "sample.dmg"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-body \".elf\" file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", function () {",
											"    pm.response.to.have.status(415);",
											"",
											"    let res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(415)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(pm.environment.get('restrictedAttachmentError'))",
											"    });",
											"",
											"    pm.test(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"File has unsupported extension\")",
											"    });",
											"",
											"     pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "sample.elf"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-body \".exe\" file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", function () {",
											"    pm.response.to.have.status(415);",
											"",
											"    let res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(415)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(pm.environment.get('restrictedAttachmentError'))",
											"    });",
											"",
											"    pm.test(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"File has unsupported extension\")",
											"    });",
											"",
											"     pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "sample.exe"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-body \".go\" file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", function () {",
											"    pm.response.to.have.status(415);",
											"",
											"    let res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(415)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(pm.environment.get('restrictedAttachmentError'))",
											"    });",
											"",
											"    pm.test(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"File has unsupported extension\")",
											"    });",
											"",
											"     pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "sample.go"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-body \".js\" file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", function () {",
											"    pm.response.to.have.status(415);",
											"",
											"    let res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(415)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(pm.environment.get('restrictedAttachmentError'))",
											"    });",
											"    pm.test(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"File has unsupported extension\")",
											"    });",
											"",
											"     pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "sample.js"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-body \".ko\" file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", function () {",
											"    pm.response.to.have.status(415);",
											"",
											"    let res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(415)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(pm.environment.get('restrictedAttachmentError'))",
											"    });",
											"",
											"    pm.test(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"File has unsupported extension\")",
											"    });",
											"",
											"     pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "sample.ko"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-body \".lib\" file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", function () {",
											"    pm.response.to.have.status(415);",
											"",
											"    let res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(415)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(pm.environment.get('restrictedAttachmentError'))",
											"    });",
											"",
											"    pm.test(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"File has unsupported extension\")",
											"    });",
											"",
											"     pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "sample.lib"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-body \".msi\" file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", function () {",
											"    pm.response.to.have.status(415);",
											"",
											"    let res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(415)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(pm.environment.get('restrictedAttachmentError'))",
											"    });",
											"",
											"    pm.test(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"File has unsupported extension\")",
											"    });",
											"",
											"     pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "sample.msi"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-body \".out\" file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", function () {",
											"    pm.response.to.have.status(415);",
											"",
											"    let res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(415)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(pm.environment.get('restrictedAttachmentError'))",
											"    });",
											"",
											"    pm.test(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"File has unsupported extension\")",
											"    });",
											"",
											"     pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "sample.out.cmd"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-body \".o\" file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", function () {",
											"    pm.response.to.have.status(415);",
											"",
											"    let res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(415)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(pm.environment.get('restrictedAttachmentError'))",
											"    });",
											"",
											"    pm.test(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"File has unsupported extension\")",
											"    });",
											"",
											"     pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "sample.o"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-body \".php\" file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", function () {",
											"    pm.response.to.have.status(415);",
											"",
											"    let res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(415)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(pm.environment.get('restrictedAttachmentError'))",
											"    });",
											"",
											"    pm.test(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"File has unsupported extension\")",
											"    });",
											"",
											"     pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "sample.php"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-body \".py\" file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", function () {",
											"    pm.response.to.have.status(415);",
											"",
											"    let res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(415)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(pm.environment.get('restrictedAttachmentError'))",
											"    });",
											"",
											"    pm.test(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"File has unsupported extension\")",
											"    });",
											"",
											"     pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "sample.py"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-body \".rpm\" file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", function () {",
											"    pm.response.to.have.status(415);",
											"",
											"    let res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(415)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(pm.environment.get('restrictedAttachmentError'))",
											"    });",
											"",
											"    pm.test(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"File has unsupported extension\")",
											"    });",
											"",
											"     pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "sample.rpm"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-body \".sh\" file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", function () {",
											"    pm.response.to.have.status(415);",
											"",
											"    let res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(415)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(pm.environment.get('restrictedAttachmentError'))",
											"    });",
											"",
											"    pm.test(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"File has unsupported extension\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "sample.sh"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-body \".so\" file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", function () {",
											"    pm.response.to.have.status(415);",
											"",
											"    let res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(415)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(pm.environment.get('restrictedAttachmentError'))",
											"    });",
											"",
											"    pm.test(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"File has unsupported extension\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "sample.so"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-body \".sys\" file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", function () {",
											"    pm.response.to.have.status(415);",
											"",
											"    let res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(415)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(pm.environment.get('restrictedAttachmentError'))",
											"    });",
											"",
											"    pm.test(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"File has unsupported extension\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "sample.sys"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-body \".vbs\" file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", function () {",
											"    pm.response.to.have.status(415);",
											"",
											"    let res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response status field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(415)",
											"    });",
											"        ",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(pm.environment.get('restrictedAttachmentError'))",
											"    });",
											"",
											"    pm.test(\"Response message text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"File has unsupported extension\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "sample.vbs"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET/v1/tickets/{{ticketId}}/comments",
					"item": [
						{
							"name": "*Comments-ticketId from anotherOrg",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test.skip(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(404)",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{anotherOrgTicketId}}/comments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{anotherOrgTicketId}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Comments-typo in the path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"",
											"     pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Bad Request.\")",
											"    });",
											"    ",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Bad Request. Invalid signature.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Invalid request signature.\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/commentS",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"commentS"
									]
								}
							},
							"response": []
						},
						{
							"name": "Comments-unsupported body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "value",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/comments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"comments"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET/v1/tickets/{{ticketId}}/attachments",
					"item": [
						{
							"name": "Attachments-typo in the path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"",
											"     pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Bad Request.\")",
											"    });",
											"    ",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Bad Request. Invalid signature.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Invalid request signature.\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachm",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachm"
									]
								}
							},
							"response": []
						},
						{
							"name": "*Attachments-ticketId from anotherOrg",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(404)",
											"    });",
											"",
											"     pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Ticket with the requested id is not found.\")",
											"    });",
											"    ",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the uploading ticket attachments.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/tickets\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{anotherOrgTicketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{anotherOrgTicketId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachments-json in body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"test\":\"test\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET/v1/tickets/{{ticketId}}/attachments/{{attachmentId}}",
					"item": [
						{
							"name": "Attachment Id from anotherOrg",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{anotherOrgTicketId}}/attachments/{{attachmentId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{anotherOrgTicketId}}",
										"attachments",
										"{{attachmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachment by ticket Id - typo in the path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachmentT/{{attachmentId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachmentT",
										"{{attachmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachment by Id - attachmentId from another ticket",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments/177f68f0dbb48550bde5d855ca961914",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments",
										"177f68f0dbb48550bde5d855ca961914"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachment by Id - wrong Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments/{{wrongTicketAttachmentId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments",
										"{{wrongTicketAttachmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attachment by Id-wrong ticketId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{wrongTicketId}}/attachments/{{attachmentId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{wrongTicketId}}",
										"attachments",
										"{{attachmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "*Attachment by Id-binary file in body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test.skip(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "png_1Mb.png"
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/tickets/{{ticketId}}/attachments/{{attachmentId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"tickets",
										"{{ticketId}}",
										"attachments",
										"{{attachmentId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "organizations",
			"item": [
				{
					"name": "organizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaOrganizations\")));",
									"        });",
									"",
									"    const res = pm.response.json();",
									"",
									"    pm.collectionVariables.set('organizationId', res[0].identifier);",
									"    pm.collectionVariables.set('organizationName', res[0].name);",
									"    pm.collectionVariables.set('orgCode', res[0].orgCode);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/organizations",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "*organization by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test.skip(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaOrganization\")));",
									"        });",
									"",
									"    const res = pm.response.json();",
									"",
									"    pm.test(\"Check organization identifier\", ()=>{",
									"        pm.expect(res.identifier).to.be.equal(pm.collectionVariables.get('organizationId'))",
									"    });",
									"",
									"     pm.test(\"Check organization name correctness\", ()=>{",
									"        pm.expect(res.name).to.be.equal(pm.collectionVariables.get('organizationName'))",
									"    });",
									"",
									"     pm.test(\"Check organization orgCode correctness\", ()=>{",
									"        pm.expect(res.orgCode).to.be.equal(pm.collectionVariables.get('orgCode'))",
									"    });",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/organizations/{{organizationId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organizationId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "organizations_negative",
			"item": [
				{
					"name": "GET/v1/organizations",
					"item": [
						{
							"name": "organizations-typo in the path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"",
											"     pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Bad Request.\")",
											"    });",
											"    ",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Bad Request. Invalid signature.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Invalid request signature.\")",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/organizationd",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"organizationd"
									]
								}
							},
							"response": []
						},
						{
							"name": "*organizations-no Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(401)",
											"    });",
											"",
											"     pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Provided authorization information is invalid.\")",
											"    });",
											"    ",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Unauthorized.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Valid authorization bearer token is required.\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/organizations\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/organizations",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "organizations-unsupported body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(403);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/organization",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"organization"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET/v1/organizations/{{organizationId}}",
					"item": [
						{
							"name": "organizations-typo in the path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"",
											"     pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Bad Request.\")",
											"    });",
											"    ",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Bad Request. Invalid signature.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Invalid request signature.\")",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/organizationd/{{organizationId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"organizationd",
										"{{organizationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "organization by Id-unsupported body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(403);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/organization/{{organizationId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"organization",
										"{{organizationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "*organization by Id-no Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(401)",
											"    });",
											"",
											"     pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Provided authorization information is invalid.\")",
											"    });",
											"    ",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Unauthorized.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Valid authorization bearer token is required.\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/organizations\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/organizations/{{organizationId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"organizations",
										"{{organizationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "organization by Id-wrong organization Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(404)",
											"    });",
											"",
											"     pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Requested organization(s) not found.\")",
											"    });",
											"    ",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the retrieving organization(s).\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\\n\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/organizations\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/organizations/239953b7-8261-42c8-a44b-4996e4d61d0n",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"organizations",
										"239953b7-8261-42c8-a44b-4996e4d61d0n"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "locations",
			"item": [
				{
					"name": "locations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaLocations\")));",
									"        });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "model/mesh",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURI}}/v1/locations",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "location availabilities list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaAvailabilities\")));",
									"        });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURI}}/v1/locations/:locationCode/availabilities",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"locations",
								":locationCode",
								"availabilities"
							],
							"variable": [
								{
									"key": "locationCode",
									"value": "DC1",
									"description": "CHI1 , DC1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "locations_negative",
			"item": [
				{
					"name": "GET/v1/locations",
					"item": [
						{
							"name": "locations-typo in the path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"",
											"     pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Bad Request.\")",
											"    });",
											"    ",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Bad Request. Invalid signature.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Invalid request signature.\")",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURI}}/v1/locationnooo",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"locationnooo"
									]
								}
							},
							"response": []
						},
						{
							"name": "locations-unsupported body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/locations",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "*locations-no X-Organization-Id header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(403)",
											"    });",
											"",
											"     pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Forbidden.\")",
											"    });",
											"    ",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Missing X-Organization-Id header.\")",
											"    });",
											"",
											"    pm.test.skip(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Access denied.\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/locations\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "image/png",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{baseURI}}/v1/locations",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "*locations-wrong X-Organization-Id header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(403)",
											"    });",
											"",
											"     pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Forbidden.\")",
											"    });",
											"    ",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Missing X-Organization-Id header.\")",
											"    });",
											"",
											"    pm.test.skip(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Access denied.\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/locations\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "image/png",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "23kmdd-3lffmd-sfdsfsd-fsms3222",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURI}}/v1/locations",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "*locations-no Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(401)",
											"    });",
											"",
											"     pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Provided authorization information is invalid.\")",
											"    });",
											"    ",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Unauthorized.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Valid authorization bearer token is required.\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/locations\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "image/png",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{baseURI}}/v1/locations",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"locations"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GETv1/locations/:locationCode/availabilities",
					"item": [
						{
							"name": "availabilities-typo in the path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"",
											"     pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Bad Request.\")",
											"    });",
											"    ",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Bad Request. Invalid signature.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Invalid request signature.\")",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURI}}/v1/locations/:locationCode/availabilitieSa",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"locations",
										":locationCode",
										"availabilitieSa"
									],
									"variable": [
										{
											"key": "locationCode",
											"value": "DC1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "availabilities-unsupported body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/locations/:locationCode/availabilities",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"locations",
										":locationCode",
										"availabilities"
									],
									"variable": [
										{
											"key": "locationCode",
											"value": "DC1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "*availabilities-no X-Organization-Id header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(403)",
											"    });",
											"",
											"     pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Forbidden.\")",
											"    });",
											"    ",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Missing X-Organization-Id header.\")",
											"    });",
											"",
											"    pm.test.skip(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Access denied.\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/locations\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "image/png",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{baseURI}}/v1/locations/:locationCode/availabilities",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"locations",
										":locationCode",
										"availabilities"
									],
									"variable": [
										{
											"key": "locationCode",
											"value": "DC1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "*availabilities-wrong X-Organization-Id header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(403)",
											"    });",
											"",
											"     pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Forbidden.\")",
											"    });",
											"    ",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Missing X-Organization-Id header.\")",
											"    });",
											"",
											"    pm.test.skip(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Access denied.\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/locations\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "image/png",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "23kmdd-3lffmd-sfdsfsd-fsms3222",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURI}}/v1/locations/:locationCode/availabilities",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"locations",
										":locationCode",
										"availabilities"
									],
									"variable": [
										{
											"key": "locationCode",
											"value": "DC1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "*availabilities-no Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(401)",
											"    });",
											"",
											"     pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Provided authorization information is invalid.\")",
											"    });",
											"    ",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Unauthorized.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Valid authorization bearer token is required.\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/locations\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "image/png",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{baseURI}}/v1/locations/:locationCode/availabilities",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"locations",
										":locationCode",
										"availabilities"
									],
									"variable": [
										{
											"key": "locationCode",
											"value": "DC1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "availabilities-invalid location Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(404)",
											"    });",
											"",
											"     pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Requested availability is not found.\")",
											"    });",
											"    ",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the retrieving availability.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\\n\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/locations\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "image/png",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{baseURI}}/v1/locations/:locationCode/availabilities",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"locations",
										":locationCode",
										"availabilities"
									],
									"variable": [
										{
											"key": "locationCode",
											"value": "DC123"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "*availabilities-not specified location Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"",
											"     pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Some errors occurred during the execution of your request.\")",
											"    });",
											"    ",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Some errors occurred during the execution of your request.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\\n\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/locations\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "image/png",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{baseURI}}/v1/locations/:locationCode/availabilities",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"locations",
										":locationCode",
										"availabilities"
									],
									"variable": [
										{
											"key": "locationCode",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "ccv",
			"item": [
				{
					"name": "ccv list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Status code is 200\", function () {",
									"//     pm.response.to.have.status(200);",
									"",
									"//     pm.test(\"Response schema validation\", ()=>{",
									"//         pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaCCVs\")));",
									"//         });",
									"",
									"//     const res = pm.response.json();",
									"",
									"//     pm.collectionVariables.set(\"ccvId\", res[0].identifier);",
									"//     pm.collectionVariables.set(\"ccvName\", res[0].name);",
									"//     pm.collectionVariables.set(\"ccvTotalSizeInBytes\", res[0].totalSizeInBytes);",
									"//     pm.collectionVariables.set(\"ccvusedSizeInBytes\", res[0].usedSizeInBytes);",
									"//     pm.collectionVariables.set(\"ccvIops\", res[0].iops);",
									"//     pm.collectionVariables.set(\"ccvSloThroughput\", res[0].sloThroughput);",
									"//     pm.collectionVariables.set(\"ccvFactionLocationId\", res[0].factionLocationId);",
									"//     pm.collectionVariables.set(\"ccvVersion\", res[0].version);",
									"// });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/ccv/volumes",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"ccv",
								"volumes"
							]
						}
					},
					"response": []
				},
				{
					"name": "*ccv by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Status code is 200\", function () {",
									"//     pm.response.to.have.status(200);",
									"",
									"//     pm.test(\"Response schema validation\", ()=>{",
									"//         pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaCCV\")));",
									"//         });",
									"",
									"//     const res = pm.response.json();",
									"",
									"//     pm.test(\"Check CCV identifier\", ()=>{",
									"//         pm.expect(res.identifier).to.be.equal(pm.collectionVariables.get('ccvId'))",
									"//     });",
									"",
									"//      pm.test(\"Check CCV name correctness\", ()=>{",
									"//         pm.expect(res.name).to.be.equal(pm.collectionVariables.get('ccvName'))",
									"//     });",
									"",
									"//      pm.test(\"Check CCV totalSizeInBytes correctness\", ()=>{",
									"//         pm.expect(res.totalSizeInBytes).to.be.equal(pm.collectionVariables.get('ccvTotalSizeInBytes'))",
									"//     });",
									"",
									"//     pm.test(\"Check CCV usedSizeInBytes correctness\", ()=>{",
									"//         pm.expect(res.usedSizeInBytes).to.be.equal(pm.collectionVariables.get('ccvUsedSizeInBytes'))",
									"//     });",
									"",
									"//     pm.test(\"Check CCV iops correctness\", ()=>{",
									"//         pm.expect(res.iops).to.be.equal(pm.collectionVariables.get('ccvIops'))",
									"//     });",
									"",
									"//     pm.test(\"Check CCV sloThroughput correctness\", ()=>{",
									"//         pm.expect(res.sloThroughput).to.be.equal(pm.collectionVariables.get('ccvSloThroughput'))",
									"//     });",
									"",
									"//      pm.test(\"Check CCV factionLocationId correctness\", ()=>{",
									"//         pm.expect(res.factionLocationId).to.be.equal(pm.collectionVariables.get('ccvFactionLocationId'))",
									"//     });",
									"",
									"//     pm.test(\"Check CCV version correctness\", ()=>{",
									"//         pm.expect(res.version).to.be.equal(pm.collectionVariables.get('ccvVersion'))",
									"//     });",
									"",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/ccv/volumes/{{ccvId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"ccv",
								"volumes",
								"{{ccvId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "*ccv metrics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test.skip(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaMetrics\")));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURI}}/v1/ccv/volumes/:ccvId/metrics",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"ccv",
								"volumes",
								":ccvId",
								"metrics"
							],
							"variable": [
								{
									"key": "ccvId",
									"value": "3ee22a7e-0061-42e3-9120-5d4e647fa182",
									"description": "7e66a395-baf8-47ec-80f4-a2328137e378"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ccv_negative",
			"item": [
				{
					"name": "GET/v1/ccv/volumes",
					"item": [
						{
							"name": "ccv list-typo in the path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"",
											"     pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Bad Request.\")",
											"    });",
											"    ",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Bad Request. Invalid signature.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Invalid request signature.\")",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/ccv/volumen",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"ccv",
										"volumen"
									]
								}
							},
							"response": []
						},
						{
							"name": "ccv list-unsupported body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/ccv/volumes",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"ccv",
										"volumes"
									]
								}
							},
							"response": []
						},
						{
							"name": "*ccv list-wrong X-Organization-Id header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(403)",
											"    });",
											"",
											"     pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Forbidden.\")",
											"    });",
											"    ",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Invalid X-Organization-Id header.\")",
											"    });",
											"",
											"    pm.test.skip(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Access denied.\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/ccv/volumes\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "23kmdd-3lffmd-sfdsfsd-fsms3222",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{baseURI}}/v1/ccv/volumes",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"ccv",
										"volumes"
									]
								}
							},
							"response": []
						},
						{
							"name": "*ccv list-no X-Organization-Id header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(403)",
											"    });",
											"",
											"     pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Forbidden.\")",
											"    });",
											"    ",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Missing X-Organization-Id header.\")",
											"    });",
											"",
											"    pm.test.skip(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Access denied.\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/ccv/volumes\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{baseURI}}/v1/ccv/volumes",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"ccv",
										"volumes"
									]
								}
							},
							"response": []
						},
						{
							"name": "*ccv list-no Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(401)",
											"    });",
											"",
											"     pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Provided authorization information is invalid.\")",
											"    });",
											"    ",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Unauthorized.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Valid authorization bearer token is required.\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/ccv/volumes\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/ccv/volumes",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"ccv",
										"volumes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET/v1/ccv/volumes/{{ccvId}}",
					"item": [
						{
							"name": "ccv by Id-typo in the path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"",
											"     pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Bad Request.\")",
											"    });",
											"    ",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Bad Request. Invalid signature.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Invalid request signature.\")",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/ccv/volumen/{{ccvId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"ccv",
										"volumen",
										"{{ccvId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ccv by Id-unsupported body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/ccv/volumes/{{ccvId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"ccv",
										"volumes",
										"{{ccvId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "*ccv by Id-wrong X-Organization-Id header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(403)",
											"    });",
											"",
											"     pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Forbidden.\")",
											"    });",
											"    ",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Invalid X-Organization-Id header.\")",
											"    });",
											"",
											"    pm.test.skip(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Access denied.\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/ccv/volumes\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "23kmdd-3lffmd-sfdsfsd-fsms3222",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{baseURI}}/v1/ccv/volumes/{{ccvId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"ccv",
										"volumes",
										"{{ccvId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "*ccv by Id-no X-Organization-Id header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(403)",
											"    });",
											"",
											"     pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Forbidden.\")",
											"    });",
											"    ",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Missing X-Organization-Id header.\")",
											"    });",
											"",
											"    pm.test.skip(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Access denied.\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/ccv/volumes\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{baseURI}}/v1/ccv/volumes/{{ccvId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"ccv",
										"volumes",
										"{{ccvId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "*ccv by Id-no Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(401)",
											"    });",
											"",
											"     pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Provided authorization information is invalid.\")",
											"    });",
											"    ",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Unauthorized.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Valid authorization bearer token is required.\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/ccv/volumes\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/ccv/volumes/{{ccvId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"ccv",
										"volumes",
										"{{ccvId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ccv by Id - ccv from another org",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(404)",
											"    });",
											"",
											"     pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Requested CCV(s) not found.\")",
											"    });",
											"    ",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the retrieving CCV(s).\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\\n\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/ccv/volumes\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURI}}/v1/ccv/volumes/{{notMevCcvId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"ccv",
										"volumes",
										"{{notMevCcvId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ccv by Id - invalid ccv",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(404)",
											"    });",
											"",
											"     pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Requested CCV(s) not found.\")",
											"    });",
											"    ",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the retrieving CCV(s).\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\\n\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/ccv/volumes\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURI}}/v1/ccv/volumes/912f5164-363b-46c8-86e4-32A",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"ccv",
										"volumes",
										"912f5164-363b-46c8-86e4-32A"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET/v1/ccv/volumes/{{ccvId}}/metrics",
					"item": [
						{
							"name": "ccv metrics-typo in the path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"",
											"     pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Bad Request.\")",
											"    });",
											"    ",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Bad Request. Invalid signature.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Invalid request signature.\")",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/ccv/volumen/{{ccvId}}/metric",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"ccv",
										"volumen",
										"{{ccvId}}",
										"metric"
									]
								}
							},
							"response": []
						},
						{
							"name": "ccv metrics-unsupported body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/ccv/volumes/{{ccvId}}/metrics",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"ccv",
										"volumes",
										"{{ccvId}}",
										"metrics"
									]
								}
							},
							"response": []
						},
						{
							"name": "*ccv metrics-wrong X-Organization-Id header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(403)",
											"    });",
											"",
											"     pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Forbidden.\")",
											"    });",
											"    ",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Invalid X-Organization-Id header.\")",
											"    });",
											"",
											"    pm.test.skip(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Access denied.\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/ccv/volumes\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "23kmdd-3lffmd-sfdsfsd-fsms3222",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{baseURI}}/v1/ccv/volumes/{{ccvId}}/metrics",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"ccv",
										"volumes",
										"{{ccvId}}",
										"metrics"
									]
								}
							},
							"response": []
						},
						{
							"name": "*ccv metrics-no X-Organization-Id header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(403)",
											"    });",
											"",
											"     pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Forbidden.\")",
											"    });",
											"    ",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Missing X-Organization-Id header.\")",
											"    });",
											"",
											"    pm.test.skip(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Access denied.\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/ccv/volumes\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{baseURI}}/v1/ccv/volumes/{{ccvId}}/metrics",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"ccv",
										"volumes",
										"{{ccvId}}",
										"metrics"
									]
								}
							},
							"response": []
						},
						{
							"name": "*ccv metrics-no Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(401)",
											"    });",
											"",
											"     pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Provided authorization information is invalid.\")",
											"    });",
											"    ",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Unauthorized.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Valid authorization bearer token is required.\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/ccv/volumes\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/ccv/volumes/{{ccvId}}/metrics",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"ccv",
										"volumes",
										"{{ccvId}}",
										"metrics"
									]
								}
							},
							"response": []
						},
						{
							"name": "*ccv metrics-ccv from another org",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(404)",
											"    });",
											"",
											"     pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Requested CCV(s) not found.\")",
											"    });",
											"    ",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the retrieving CCV(s).\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\\n\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/ccv/volumes\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURI}}/v1/ccv/volumes/{{notMevCcvId}}/metrics",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"ccv",
										"volumes",
										"{{notMevCcvId}}",
										"metrics"
									]
								}
							},
							"response": []
						},
						{
							"name": "*ccv metrics-invalid ccv",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(404)",
											"    });",
											"",
											"     pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Requested CCV(s) not found.\")",
											"    });",
											"    ",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the retrieving CCV(s).\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\\n\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/ccv/volumes\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURI}}/v1/ccv/volumes/912f5164-363b-46c8-86e4-32A/metrics",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"ccv",
										"volumes",
										"912f5164-363b-46c8-86e4-32A",
										"metrics"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "*users_e2e",
			"item": [
				{
					"name": "user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
									"        });",
									"    const res = pm.response.json();",
									"",
									"    pm.collectionVariables.set('userId', res.identifier);",
									"    pm.collectionVariables.set('userName', res.username);",
									"    pm.collectionVariables.set('userEmail', res.email);",
									"    pm.collectionVariables.set('userFirstName', res.firstName);",
									"    pm.collectionVariables.set('userLastName', res.lastName);",
									"    pm.collectionVariables.set('userPhoneNumber', res.phone);",
									"    pm.collectionVariables.set('userMainRole', res.roles[0]);",
									"    pm.collectionVariables.set('userTimeZone', res.timezone);",
									"    pm.collectionVariables.set('userPhotoUrl', res.photoUrl);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "avatar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"",
									"   const res = pm.response.json();",
									"   pm.collectionVariables.set('changedPhotoUrl', res);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": "png_avatar2.png"
								}
							]
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/avatar",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"avatar"
							]
						}
					},
					"response": []
				},
				{
					"name": "**users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Status code is 200\", function () {",
									"//     pm.response.to.have.status(200);",
									"",
									"    // pm.test(\"Response schema validation\", ()=>{",
									"    //     pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUsers\")))",
									"    //     });",
									"",
									"//     function _isContains(json, keyname, value) {",
									"//         return Object.keys(json).some(key => {",
									"//         return typeof json[key] === 'object' ? ",
									"//         _isContains(json[key], keyname, value) : key === keyname && json[key] === value;",
									"//     });",
									"//     }",
									"",
									"//     pm.test(\"The response contains a valid id in the response\", function () {",
									"//     pm.expect(_isContains(res, \"identifier\" , \"1669f941-46d2-4403-89e3-7292f5508670\")).to.be.true;",
									"// });",
									"",
									"//     const res = pm.response.json();",
									"",
									"// pm.test(\"Validate JSON data of summary list\", function () {",
									"//     for (var i = 0; i < res.length; i++) {",
									"//         pm.expect(res[i].identifier).to.be.a(\"1669f941-46d2-4403-89e3-7292f5508670\");",
									"        ",
									"//     }",
									"// });",
									"    ",
									"    // pm.test('User Id is present on the list', () => {",
									"    //     _.each(res.identifier, (item) => {",
									"    //     pm.expect(item.identifier).to.have(pm.collectionVariables.get('userId'))",
									"    //     });",
									"    // });",
									"",
									"    // const child = res.results.find(c => c.identifier === pm.collectionVariables.get('userId'));",
									"    // pm.expect(child).exist;",
									"",
									"    // pm.test('User First Name is present on the list', () => {",
									"    //     _.each(res.firstName, (item) => {",
									"    //     pm.expect(item.firstName).to.include(pm.collectionVariables.get('userFirstName'))",
									"    //     });",
									"    // });",
									"",
									"    // pm.test('User Email is present on the list', () => {",
									"    //     _.each(res.identifier, (item) => {",
									"    //     pm.expect(item.identifier).to.include(pm.collectionVariables.get('userEmail'))",
									"    //     });",
									"    // });",
									"",
									"",
									"// });",
									"",
									"  ",
									"    // pm.collectionVariables.set('userFirstName', res.firstName);",
									"    // pm.collectionVariables.set('userLastName', res.lastName);",
									"    // pm.collectionVariables.set('userPhoneNumber', res.phone);",
									"    // pm.collectionVariables.set('userMainRole', res.roles[0]);",
									"    // pm.collectionVariables.set('userTimeZone', res.timezone);",
									"    // pm.collectionVariables.set('userPhotoUrl', res.photoUrl);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseURI}}/v1/users",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
									"        });",
									"    ",
									"    const res = pm.response.json();",
									"",
									"    pm.test(\"User First Name is changed\", ()=>{",
									"        pm.expect(res.firstName).to.not.equal(pm.collectionVariables.get('userFirstName'));",
									"    });",
									"",
									"    pm.test(\"User Last Name is changed\", ()=>{",
									"        pm.expect(res.lastName).to.not.equal(pm.collectionVariables.get('userLastName'));",
									"    });",
									"",
									"    pm.test(\"User Email is changed\", ()=>{",
									"        pm.expect(res.email).to.not.equal(pm.collectionVariables.get('userEmail'));",
									"    });",
									"",
									"    pm.test(\"User Phone number is changed\", ()=>{",
									"        pm.expect(res.phone).to.not.equal(pm.collectionVariables.get('userPhoneNumber'));",
									"    });",
									"",
									"    pm.test(\"User Time Zone is changed\", ()=>{",
									"        pm.expect(res.timezone).to.not.equal(pm.collectionVariables.get('userTimeZone'));",
									"    });",
									"",
									"    pm.test(\"User Photo Url is changed\", ()=>{",
									"        pm.expect(res.photoUrl).to.not.equal(pm.collectionVariables.get('userPhotoUrl'));",
									"    });",
									"",
									"    pm.test(\"User main Role is changed\", ()=>{",
									"        pm.expect(res.roles[0]).to.not.equal(pm.collectionVariables.get('userMainRole'));",
									"    });",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"roles\":[\n          \"{{group}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{newTimeZone}}\",\n  \"photoUrl\": \"{{changedPhotoUrl}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/{{userId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "**users Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Status code is 200\", function () {",
									"//     pm.response.to.have.status(200);",
									"",
									"//     pm.test(\"Response schema validation\", ()=>{",
									"//         pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUsers\")))",
									"//         });",
									"",
									"//     const res = pm.response.json();",
									"",
									"//     pm.test('The user id is present on the list', () => {",
									"//         _.each(res.identifier, (item) => {",
									"//         pm.expect(item.identifier).to.include(pm.collectionVariables.get('userId'))",
									"//         });",
									"//     });",
									"",
									"//     pm.test('The user email is present on the list', () => {",
									"//         _.each(res.identifier, (item) => {",
									"//         pm.expect(item.identifier).to.include(pm.collectionVariables.get('userEmail'))",
									"//         });",
									"//     });",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseURI}}/v1/users",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "user password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUserPassword\")));",
									"        });",
									"    const res = pm.response.json();",
									"",
									"    pm.collectionVariables.set('userTempPassword', res.password);",
									"",
									"    pm.test(\"User status is: 'MUST_CHANGE_PASSWORD'\", ()=>{",
									"        pm.expect(res.userStatus).to.be.equal(\"MUST_CHANGE_PASSWORD\")",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"newPassword\": \"{{$randomPassword}}+22\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/{{userId}}/password",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "change password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUserChangePassword\")));",
									"        });",
									"    const res = pm.response.json();",
									"",
									"    pm.collectionVariables.set('changedPassword', res.password);",
									"",
									"    pm.test(\"User status is: 'OK'\", function () {",
									"        pm.expect(res.userStatus).to.be.equal(\"OK\")",
									"    });",
									"",
									"    pm.test(\"User password is changed\", function () {",
									"        pm.expect(res.password).to.be.not.equal(pm.collectionVariables.get('userTempPassword'))",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"currentPassword\":\"{{userTempPassword}}\",\n  \"newPassword\": \"{{$randomPassword}}@22\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/{{userId}}/password",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "login with a changed password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set( \"code_challenge\",",
									"    CryptoJS.SHA256(pm.environment.get(\"code_verifier\"))",
									"        .toString(CryptoJS.enc.Base64)",
									"        .replace(\"+\", \"-\")",
									"        .replace(\"/\", \"_\")",
									"        .replace(/=+$/, \"\")",
									");",
									"",
									"/**",
									" * @private",
									" * @description Internal function to run tasks in series",
									" * ",
									" * @param {Array<Function>} tasks",
									" * @param {Function} cb",
									" * @param {Number} currOperation",
									" * @param {Array<Any>} results",
									" */",
									"function _series (tasks, cb, currOperation = 0, results = []) {",
									"    // Bail-out condition",
									"    if (currOperation === tasks.length) {",
									"        return cb(null, results);",
									"    }",
									"",
									"    if (typeof tasks[currOperation] !== 'function') {",
									"        return cb(new Error('asyncSeries: Please provide a function'));",
									"    }",
									"",
									"    tasks[currOperation]((err, res) => {",
									"        if (err) {",
									"            return cb(err);",
									"        }",
									"",
									"        results.push(res);",
									"",
									"        // Recursively call the next task in series till we're done executing all the operations",
									"        return _series(tasks, cb, currOperation + 1, results);",
									"    });",
									"}",
									"",
									"/**",
									" * @description asyncSeries to execute requests in a series format",
									" * ",
									" * @param {Array<Function>} tasks",
									" * @param {Function} cb",
									" */",
									"function asyncSeries (tasks, cb = () => {}) {",
									"    return _series(tasks, cb);",
									"}",
									"",
									"// Usage:",
									"",
									"asyncSeries([",
									"",
									"    //1st call \"Authorize\"",
									"    (cb) => pm.sendRequest({",
									"    url: 'https://auth.pingone.com/'+ pm.environment.get('service_id')+'/as/authorize?client_id='+ pm.environment.get('client_id')+'&redirect_uri='+pm.environment.get('redirect_uri')+'&response_type=code&scope=openid profile email portal portal_admin&state=dbdc93063478479fa09bfe728cb261bf&code_challenge='+pm.environment.get('code_challenge')+'&code_challenge_method=S256&response_mode=query',",
									"    method: 'GET'},",
									"(err,res) => {",
									"    pm.environment.set(\"flowId\", res.headers.get('Location').split(\"flowId=\")[1]);",
									"    cb(err,res);",
									"}),",
									"",
									"     //2nd call \"Username\"",
									"    (cb) => pm.sendRequest({",
									"    url: pm.environment.get('pingURI')+'/'+pm.environment.get('service_id')+'/flows/'+pm.environment.get('flowId'),",
									"    method: 'POST',",
									"    header:{'Content-type': 'application/vnd.pingidentity.user.lookup+json'},",
									"    body:{mode: 'raw',",
									"            raw: JSON.stringify({'username': pm.collectionVariables.get('userName')})",
									"            } ",
									"}, ",
									"(err,res) => {",
									"    cb(err,res);",
									"})",
									"]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test.skip(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.pingidentity.usernamePassword.check+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"{{changedPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{pingURI}}/{{service_id}}/flows/{{flowId}}",
							"host": [
								"{{pingURI}}"
							],
							"path": [
								"{{service_id}}",
								"flows",
								"{{flowId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-change firstName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
									"        });",
									"    ",
									"    const res = pm.response.json();",
									"",
									"    pm.test(\"User First Name is changed\", ()=>{",
									"        pm.expect(res.firstName).to.not.equal(pm.collectionVariables.get('userFirstName'));",
									"    });",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"{{$randomFirstName}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/{{userId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-change lastName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
									"        });",
									"    ",
									"    const res = pm.response.json();",
									"",
									"",
									"    pm.test(\"User Last Name is changed\", ()=>{",
									"        pm.expect(res.lastName).to.not.equal(pm.collectionVariables.get('userLastName'));",
									"    });",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"lastName\": \"delete_test_{{$randomLastName}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/{{userId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-change email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
									"        });",
									"    ",
									"    const res = pm.response.json();",
									"",
									"    pm.test(\"User Email is changed\", ()=>{",
									"        pm.expect(res.email).to.not.equal(pm.collectionVariables.get('userEmail'));",
									"    });",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{$randomEmail}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/{{userId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-change role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
									"        });",
									"    ",
									"    const res = pm.response.json();",
									"",
									"    pm.test(\"User main Role is changed\", ()=>{",
									"        pm.expect(res.roles[0]).to.not.equal(pm.collectionVariables.get('userMainRole'));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"roles\":[\"{{org}}\", \"{{user_role}}\"]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/{{userId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-change phoneNumber",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
									"        });",
									"    ",
									"    const res = pm.response.json();",
									"",
									"    pm.test(\"User Phone number is changed\", ()=>{",
									"        pm.expect(res.phone).to.not.equal(pm.collectionVariables.get('userPhoneNumber'));",
									"    });",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"phone\": \"{{$randomPhoneNumber}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/{{userId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-change timeZone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
									"        });",
									"    ",
									"    const res = pm.response.json();",
									"",
									"    pm.test(\"User Time Zone is changed\", ()=>{",
									"        pm.expect(res.timezone).to.not.equal(pm.collectionVariables.get('userTimeZone'));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"timezone\": \"{{newTimeZone}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/{{userId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-change photoUrl",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
									"        });",
									"    ",
									"    const res = pm.response.json();",
									"",
									"    pm.test(\"User First Name is changed\", ()=>{",
									"        pm.expect(res.firstName).to.not.equal(pm.collectionVariables.get('userFirstName'));",
									"    });",
									"",
									"    pm.test(\"User Last Name is changed\", ()=>{",
									"        pm.expect(res.lastName).to.not.equal(pm.collectionVariables.get('userLastName'));",
									"    });",
									"",
									"    pm.test(\"User Email is changed\", ()=>{",
									"        pm.expect(res.email).to.not.equal(pm.collectionVariables.get('userEmail'));",
									"    });",
									"",
									"    pm.test(\"User Phone number is changed\", ()=>{",
									"        pm.expect(res.phone).to.not.equal(pm.collectionVariables.get('userPhoneNumber'));",
									"    });",
									"",
									"    pm.test(\"User Time Zone is changed\", ()=>{",
									"        pm.expect(res.timezone).to.not.equal(pm.collectionVariables.get('userTimeZone'));",
									"    });",
									"",
									"    pm.test(\"User Photo Url is changed\", ()=>{",
									"        pm.expect(res.photoUrl).to.not.equal(pm.collectionVariables.get('userPhotoUrl'));",
									"    });",
									"",
									"    pm.test(\"User main Role is changed\", ()=>{",
									"        pm.expect(res.roles[0]).to.not.equal(pm.collectionVariables.get('userMainRole'));",
									"    });",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"roles\":[\n          \"{{group}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{newTimeZone}}\",\n  \"photoUrl\": \"{{changedPhotoUrl}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users/{{userId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"",
									"    pm.test(\"Response does not contain a body\", ()=>{",
									"        pm.response.to.not.have.body();",
									"        });",
									"    ",
									"    pm.test(\"Content-Type header is application/json\", () => {",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json')",
									"    });",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseURI}}/v1/users/{{userId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user max field length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
									"        });",
									"",
									"    const res = pm.response.json();",
									"    pm.collectionVariables.set('userId', res.identifier);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {",
									"    if (!minValue) {",
									"        minValue = 128;",
									"        maxValue = 128;",
									"    }",
									"",
									"    if (!maxValue) {",
									"        maxValue = minValue;",
									"    }",
									"",
									"    let length = _.random(minValue, maxValue),",
									"        randomString = \"\";",
									"",
									"    for (let i = 0; i < length; i++)",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));",
									"    return randomString;",
									"}",
									"",
									"pm.collectionVariables.set('randomString128', randomString());",
									"console.log(pm.collectionVariables.get('randomString128'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{randomString128}}\",\n  \"firstName\": \"{{longFirstName}}\",\n  \"lastName\": \"{{longLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"roles\":[\n          \"{{master}}\",\"{{group}}\", \"{{org}}\", \"{{technician}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{longPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users"
							]
						},
						"description": "The aim of this request is to test the ability to save the data with a maximum number of characters:\n\n*   username - 128;\n*   firstName - 255;\n*   lastName - 255;\n*   phoneNumber - 32."
					},
					"response": []
				},
				{
					"name": "user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"",
									"    pm.test(\"Response does not contain a body\", ()=>{",
									"        pm.response.to.not.have.body();",
									"        });",
									"    ",
									"    pm.test(\"Content-Type header is application/json\", () => {",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json')",
									"    });",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseURI}}/v1/users/{{userId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user min field length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"",
									"    pm.test(\"Response schema validation\", ()=>{",
									"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
									"        });",
									"",
									"    const res = pm.response.json();",
									"    pm.collectionVariables.set('userId', res.identifier);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {",
									"    if (!minValue) {",
									"        minValue = 1;",
									"        maxValue = 1;",
									"    }",
									"",
									"    if (!maxValue) {",
									"        maxValue = minValue;",
									"    }",
									"",
									"    let length = _.random(minValue, maxValue),",
									"        randomString = \"\";",
									"",
									"    for (let i = 0; i < length; i++)",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));",
									"    return randomString;",
									"}",
									"",
									"pm.collectionVariables.set('randomString1', randomString());",
									"console.log(pm.collectionVariables.get('randomString1'));",
									"",
									"",
									"//  pm.sendRequest({",
									"//     url: pm.environment.get('baseURI')+'/v1/users/'+ pm.collectionVariables.get('userId'),",
									"//     method: 'DELETE',",
									"//     header:{'X-Organization-Id': pm.collectionVariables.get('x-organization-id')},",
									"//     header:{'Authorization': 'Bearer'+ pm.collectionVariables.get('token')}",
									"//     },",
									"// (err,res) => {(err,res)",
									"// });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{randomString1}}\",\n  \"firstName\": \"d\",\n  \"lastName\": \"I\",\n  \"email\": \"p@i.net\",\n  \"roles\":[\n          \"{{user_role}}\"\n  ],\n  \"phone\": \"2\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/v1/users",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users"
							]
						},
						"description": "The aim of this request is to test the ability to save the data with a maximum number of characters:\n\n*   username - 128;\n*   firstName - 255;\n*   lastName - 255;\n*   phoneNumber - 32."
					},
					"response": []
				},
				{
					"name": "user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"",
									"    pm.test(\"Response does not contain a body\", ()=>{",
									"        pm.response.to.not.have.body();",
									"        });",
									"    ",
									"    pm.test(\"Content-Type header is application/json\", () => {",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json')",
									"    });",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "X-Organization-Id",
								"value": "{{x-organization-id}}",
								"type": "text"
							},
							{
								"key": "X-Organization-Id",
								"value": "{{mev}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseURI}}/v1/users/{{userId}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "users_negative",
			"item": [
				{
					"name": "precondition",
					"item": [
						{
							"name": "user for one-time password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
											"        });",
											"    const res = pm.response.json();",
											"",
											"    pm.collectionVariables.set('userForOneTimePasswordId', res.identifier);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "user for change password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUser\")));",
											"        });",
											"    const res = pm.response.json();",
											"",
											"    pm.collectionVariables.set('userForChangePasswordId', res.identifier);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "user password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaUserPassword\")));",
											"        });",
											"    const res = pm.response.json();",
											"",
											"    pm.collectionVariables.set('userPreviousPassword', res.password);",
											"",
											"    pm.test(\"User status is: 'MUST_CHANGE_PASSWORD'\", ()=>{",
											"        pm.expect(res.userStatus).to.be.equal(\"MUST_CHANGE_PASSWORD\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newPassword\": \"{{$randomPassword}}+22\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/{{userForChangePasswordId}}/password",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"{{userForChangePasswordId}}",
										"password"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST/v1/users",
					"item": [
						{
							"name": "*user-wrong OrgId in header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"",
											"    const res = pm.response.json();",
											"    const errorMessage = res.error",
											"    ",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"    });",
											"",
											"    pm.test.skip(\"Response error text is correct\", function () {",
											"        pm.expect(errorMessage).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(403)",
											"    });",
											"",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Invalid X-Organization-Id header.\")",
											"    });",
											"  ",
											"    pm.test.skip(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Access denied.\")",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "ebeb53e8-945b-4441-b05b-b1d05012253v",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "user-typo in the path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"    const errorMessage = res.error",
											"    ",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(errorMessage).to.be.equal(\"Bad Request.\")",
											"    });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Bad Request. Invalid signature.\")",
											"    });",
											"  ",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Invalid request signature.\")",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/user",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "user-wrong Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"    const errorMessage = res.error",
											"    ",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test.skip(\"Response error text is correct\", function () {",
											"        pm.expect(errorMessage).to.be.equal(\"Content-Type parameter is not valid.\")",
											"    });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"  ",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\\n\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "image/svg+xml",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "user-wrong charset in Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"    const errorMessage = res.error",
											"    ",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test.skip(\"Response error text is correct\", function () {",
											"        pm.expect(errorMessage).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Bad Request. Invalid signature.\")",
											"    });",
											"  ",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Invalid request signature.\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json;charset=BigBadaBoom",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "user-no body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s)",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during the user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"The request body is required.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\\n\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "user-body empty object",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Contains skipped test(s).",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Object to validate cannot be empty.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-username empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Username should be between 1 and 128 characters.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-username=null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Username must not be blank.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": null,\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-username=object",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Username must not be blank.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": {\"null\":\"null\"},\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-username=\\u0000",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Username must be an email address or string containing only Unicode letters, marks, dots, underscores, or hyphens.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"\\u0000\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-129chars in username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Username should be between 1 and 128 characters.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{129charText}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-firstName empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"First Name should be between 1 and 256 characters.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-firstName=null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"First Name should be between 1 and 256 characters.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": null,\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-firstName=object",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Expected firstName to be a String.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": {\"firstName\":\"firstName\"},\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-firstName=\\u0000",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"First Name must be an email address or string containing only Unicode letters, marks, dots, underscores, or hyphens.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"\\u0000\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-257 chars firstName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"First Name should be between 1 and 256 characters.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{257charText}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n\n  \"email\": \"{{$randomEmail}}\",\n\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-lastName empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Last Name should be between 1 and 256 characters.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"\",\n  \"email\": \"{{$randomEmail}}\",\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-lastName=null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Expected lastName to be a String.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": null,\n  \"email\": \"{{$randomEmail}}\",\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-lastName=object",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"VAn error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Expected lastName to be a String.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": {\"lastName\":\"lastName\"},\n  \"email\": \"{{$randomEmail}}\",\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-lastName=\\u0000",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Last Name must be an email address or string containing only Unicode letters, marks, dots, underscores, or hyphens.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"\\u0000\",\n  \"email\": \"{{$randomEmail}}\",\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "user-257 chars lastName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Last Name should be between 1 and 256 characters.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{257charText}}\",\n  \"email\": \"{{$randomEmail}}\",\n\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-email empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Email field is required.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"\",\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-email=null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Expected email to be a String.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": null,\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-email=object",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Expected email to be a String.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": {\"email\":\"oleksandr.kalyna@gmail.com\"},\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-email with dot at the beginning",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Malformed email address.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \".{{$randomEmail}}\",\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-email without @",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"   pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Malformed email address.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"oleksandr.kalynagmail.com\",\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-email with @@",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Malformed email address.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"oleksandr.kalyna@@gmail.com\",\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-email with missed recepient name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Malformed email address.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"@gmail.com\",\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-email with misssed domain name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Malformed email address.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"oleksandr.kalyna@.com\",\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-email with missed top level domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Malformed email address.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"oleksandr.kalyna@gmail\",\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-email=\\u0000",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Malformed email address.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"\\u0000\",\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "user-roles empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"User role is required.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"roles\":[],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "user-User role is not set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"User role is required.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"roles\":[\n          \"{{master}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-not existed Portal role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Invalid user role(s).\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\", \"God\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-null role among other valid roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test.skip(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Invalid user role(s).\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\", null\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "user-wrong \"username\" field name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Username field is required.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"usernames\": \"{{$randomUserName}}\",\n  \n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-wrong \"firstName\" field name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Field firstName is required.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n\n  \"fristName\": \"{{$randomFirstName}}\",\n\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-wrong \"lastName\" field name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Field lastName is required.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n\n  \"lostName\": \"delete_test_{{$randomLastName}}\",\n\n  \"email\": \"{{$randomEmail}}\",\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-wrong \"email\" field name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Email field is required.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n\n  \"emial\": \"{{$randomEmail}}\",\n\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "user-wrong \"role\" field name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Roles field is required.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \n\n  \"rol\":[\n\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-33 digits phone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Phone number should not exceed 32 digits.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{33digitsPhoneNumber}}\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-phone=\\u0000",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Invalid phone number.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"\\u0000\",\n  \"timezone\": \"{{myTimeZone}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-timezone=\\u0000",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Invalid timezone.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{33digitsPhoneNumber}}\",\n  \"timezone\": \"\\u0000\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user-timezone=256 charText",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during user creation.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Invalid timezone.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"delete_test_{{$randomLastName}}\",\n\n  \"email\": \"{{$randomEmail}}\",\n\n  \"roles\":[\n          \"{{master}}\", \"{{user_role}}\"\n  ],\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"timezone\": \"{{256charText}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT/v1/users/...one-time password",
					"item": [
						{
							"name": "user password-typo in the path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"    const errorMessage = res.error",
											"    ",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(errorMessage).to.be.equal(\"Bad Request.\")",
											"    });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Bad Request. Invalid signature.\")",
											"    });",
											"  ",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Invalid request signature.\")",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newPassword\": \"Cv2#o.9)\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/{{userForOneTimePasswordId}}/pasword",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"{{userForOneTimePasswordId}}",
										"pasword"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user password-wrong Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"    const errorMessage = res.error",
											"    ",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test.skip(\"Response error text is correct\", function () {",
											"        pm.expect(errorMessage).to.be.equal(\"Bad Request.\")",
											"    });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Bad Request. Invalid signature.\")",
											"    });",
											"  ",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\\n\")",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "image/svg+xml",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newPassword\": \"Ckv2#o.9)\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/{{userForOneTimePasswordId}}/password",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"{{userForOneTimePasswordId}}",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user password-userId=null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(404)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Password is invalid. Should be minimum 8 and maximum 255 characters.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the user password update.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newPassword\": \"Cv2#o.9a\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/null/password",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"null",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user password-userId empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Password is invalid. Should be minimum 8 and maximum 255 characters.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the user password update.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newPassword\": \"Cv2#o.9a\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users//password",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user password-userId=*",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(404)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Password is invalid. Should be minimum 8 and maximum 255 characters.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the user password update.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newPassword\": \"Cv2#o.9a\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/*/password",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"*",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "user password-wrong userId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(404)",
											"    });",
											"        ",
											"    pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"An error occurred during the updating of the password.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the updating of the password.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newPassword\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/{{wrongUserId}}/password",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"{{wrongUserId}}",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user password-no body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"    const errorMessage = res.error",
											"    ",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(errorMessage).to.be.equal(\"The request body is required.\")",
											"    });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the user password update.\")",
											"    });",
											"  ",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\\n\")",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/{{userForOneTimePasswordId}}/password",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"{{userForOneTimePasswordId}}",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "user password-empty newPassword",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"New password is required.\")",
											"    });",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the updating of the password.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newPassword\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/{{userForOneTimePasswordId}}/password",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"{{userForOneTimePasswordId}}",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user password-wrong newPassword name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"New password is required.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the user password update.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newPasswords\": \"Iokjh*7&,_}[\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/{{userForOneTimePasswordId}}/password",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"{{userForOneTimePasswordId}}",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user password-256 chars",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Password is invalid. Should be minimum 8 and maximum 255 characters.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the user password update.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newPassword\": \"{{256charText}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/{{userForOneTimePasswordId}}/password",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"{{userForOneTimePasswordId}}",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user password-7 chars",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Password is invalid. Should be minimum 8 and maximum 255 characters.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the user password update.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newPassword\": \"Cv2#o.9\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/{{userForOneTimePasswordId}}/password",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"{{userForOneTimePasswordId}}",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user password-no digit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Password is invalid. Should be minimum 8 and maximum 255 characters.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the user password update.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newPassword\": \"Cvee#o.ld\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/{{userForOneTimePasswordId}}/password",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"{{userForOneTimePasswordId}}",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user password-no special char",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Password is invalid. Must have at least one special character.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the user password update.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newPassword\": \"Cv2xof94\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/{{userForOneTimePasswordId}}/password",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"{{userForOneTimePasswordId}}",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user password-no uppercase letter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Password is invalid. Must have at least one capital case character.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the user password update.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newPassword\": \"p%pv2xof94\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/{{userForOneTimePasswordId}}/password",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"{{userForOneTimePasswordId}}",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user password-no lowercase letter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Password is invalid. Must have at least one lower case character.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the user password update.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newPassword\": \"PO%294MX,.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/{{userForOneTimePasswordId}}/password",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"{{userForOneTimePasswordId}}",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete test user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(204);",
											"",
											"    pm.test(\"Response does not contain a body\", ()=>{",
											"        pm.response.to.not.have.body();",
											"        });",
											"    ",
											"    pm.test(\"Content-Type header is application/json\", () => {",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json')",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/v1/users/{{userForOneTimePasswordId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"{{userForOneTimePasswordId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT/v1/users/...change password",
					"item": [
						{
							"name": "user password-typo in the path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"    const errorMessage = res.error",
											"    ",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(errorMessage).to.be.equal(\"Bad Request.\")",
											"    });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Bad Request. Invalid signature.\")",
											"    });",
											"  ",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Invalid request signature.\")",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"previousPassword\": \"{{userPreviousPassword}}\",\n  \"newPassword\": \"Cv2#o.9)\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/{{userForChangePasswordId}}/pasword",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"{{userForChangePasswordId}}",
										"pasword"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user password-wrong Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"    const errorMessage = res.error",
											"    ",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test.skip(\"Response error text is correct\", function () {",
											"        pm.expect(errorMessage).to.be.equal(\"Bad Request.\")",
											"    });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Bad Request. Invalid signature.\")",
											"    });",
											"  ",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\\n\")",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "image/svg+xml",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"previousPassword\": \"{{userPreviousPassword}}\",\n  \"newPassword\": \"Cv2#o.9a\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/{{userForChangePasswordId}}/password",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"{{userForChangePasswordId}}",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user password-userId=null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(404)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Password is invalid. Should be minimum 8 and maximum 255 characters.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the user password update.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"previousPassword\": \"{{userPreviousPassword}}\",\n  \"newPassword\": \"Cv2#o.9a\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/null/password",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"null",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user password-userId empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Password is invalid. Should be minimum 8 and maximum 255 characters.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the user password update.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"previousPassword\": \"{{userPreviousPassword}}\",\n  \"newPassword\": \"Cv2#o.9a\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users//password",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user password-userId=*",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(404)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Password is invalid. Should be minimum 8 and maximum 255 characters.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the user password update.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"previousPassword\": \"{{userPreviousPassword}}\",\n  \"newPassword\": \"Cv2#o.9a\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/*/password",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"*",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user password-wrong userId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(404)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"New password is required.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the updating of the password.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"previousPassword\": \"{{userPreviousPassword}}\",\n  \"newPassword\": \"Cv2#o.9a\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/{{wrongUserId}}/password",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"{{wrongUserId}}",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user password-no body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"    const errorMessage = res.error",
											"    ",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(errorMessage).to.be.equal(\"The request body is required.\")",
											"    });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the user password update.\")",
											"    });",
											"  ",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\\n\")",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/{{userForChangePasswordId}}/password",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"{{userForChangePasswordId}}",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "user password-empty newPassword",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"New password is required.\")",
											"    });",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the updating of the password.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"previousPassword\": \"{{userPreviousPassword}}\",\n  \"newPassword\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/{{userForChangePasswordId}}/password",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"{{userForChangePasswordId}}",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user password-wrong newPassword name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"New password is required.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the user password update.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"previousPassword\": \"{{userPreviousPassword}}\",\n  \"newPasswords\": \"Iokjh*7&,_}[\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/{{userForChangePasswordId}}/password",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"{{userForChangePasswordId}}",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user password-256 chars",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Password is invalid. Should be minimum 8 and maximum 255 characters.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the user password update.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"previousPassword\": \"{{userPreviousPassword}}\",\n  \"newPassword\": \"{{256charText}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/{{userForChangePasswordId}}/password",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"{{userForChangePasswordId}}",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user password-7 chars",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Password is invalid. Should be minimum 8 and maximum 255 characters.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the user password update.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"previousPassword\": \"{{userPreviousPassword}}\",\n  \"newPassword\": \"Cv2#o.9\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/{{userForChangePasswordId}}/password",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"{{userForChangePasswordId}}",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user password-no digit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test.skip(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Password is invalid. Should be minimum 8 and maximum 255 characters.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the user password update.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newPassword\": \"Cvee#o.ld\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/{{userForChangePasswordId}}/password",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"{{userForChangePasswordId}}",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user password-no special char",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Password is invalid. Must have at least one special character.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the user password update.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newPassword\": \"Cv2xof94\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/{{userForChangePasswordId}}/password",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"{{userForChangePasswordId}}",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user password-no uppercase letter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Password is invalid. Must have at least one capital case character.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the user password update.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newPassword\": \"p%pv2xof94\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/{{userForChangePasswordId}}/password",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"{{userForChangePasswordId}}",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user password-no lowercase letter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Password is invalid. Must have at least one lower case character.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the user password update.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newPassword\": \"PO%294MX,.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/{{userForChangePasswordId}}/password",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"{{userForChangePasswordId}}",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "*user password-3 repeated chars",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.variables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"        ",
											"    pm.test(\"Response 'error' text is correct\", function () {",
											"        pm.expect(res.error).to.be.equal(\"Password is invalid. No more than 2 repeated characters.\")",
											"    });",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred during the user password update.\")",
											"    });",
											"",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users\")",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"previousPassword\": \"{{userPreviousPassword}}\",\n  \"newPassword\": \"22qq!!WWW\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/{{userForChangePasswordId}}/password",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"{{userForChangePasswordId}}",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete test user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(204);",
											"",
											"    pm.test(\"Response does not contain a body\", ()=>{",
											"        pm.response.to.not.have.body();",
											"        });",
											"    ",
											"    pm.test(\"Content-Type header is application/json\", () => {",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json')",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/v1/users/{{userForChangePasswordId}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"{{userForChangePasswordId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET/v1/users",
					"item": [
						{
							"name": "users-typo in the path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"    const errorMessage = res.error",
											"    ",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(errorMessage).to.be.equal(\"Bad Request.\")",
											"    });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Bad Request. Invalid signature.\")",
											"    });",
											"  ",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Invalid request signature.\")",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/v1/usersa",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"usersa"
									]
								}
							},
							"response": []
						},
						{
							"name": "users-double slash in the path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"    const errorMessage = res.error",
											"    ",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(errorMessage).to.be.equal(\"Bad Request.\")",
											"    });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Bad Request. Invalid signature.\")",
											"    });",
											"  ",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Invalid request signature.\")",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{factionHQ}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/v1//users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "users-unsupported body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{factionHQ}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "field",
											"value": "value",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/users",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST/v1/users/avatar",
					"item": [
						{
							"name": "avatar - wrong Content-Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"    const errorMessage = res.error",
											"    ",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(errorMessage).to.be.equal(\"Content-Type parameter is not valid.\")",
											"    });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"Unsupported content type - \")",
											"    });",
											"  ",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\\n\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users/avatar\")",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/pdf",
										"description": "Unsupported Content-Type",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "jpeg_avatar.jpeg"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/avatar",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"avatar"
									]
								}
							},
							"response": []
						},
						{
							"name": "avatar - typo in the path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"    const errorMessage = res.error",
											"    ",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(errorMessage).to.be.equal(\"Bad Request.\")",
											"    });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"Bad Request. Invalid signature.\")",
											"    });",
											"  ",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.be.equal(\"Invalid request signature.\")",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/pdf",
										"description": "Unsupported Content-Type",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "jpeg_avatar5.jpeg"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/svatar",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"svatar"
									]
								}
							},
							"response": []
						},
						{
							"name": "avatar - no body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"    ",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users/avatar\")",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseURI}}/v1/users/avatar",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"avatar"
									]
								}
							},
							"response": []
						},
						{
							"name": "avatar - object in body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"",
											"    const res = pm.response.json();",
											"    ",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users/avatar\")",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"file\":\"fileName\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/avatar",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"avatar"
									]
								}
							},
							"response": []
						},
						{
							"name": "avatar - bad file extension",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", function () {",
											"    pm.response.to.have.status(415);",
											"",
											"    const res = pm.response.json();",
											"    const errorMessage = res.error",
											"    ",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(errorMessage).to.be.equal(\"An error occurred during the uploading avatar.\")",
											"    });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(415)",
											"    });",
											"",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.include(\"File has unsupported extension \")",
											"    });",
											"  ",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\\n\")",
											"    });",
											"",
											"    ",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users/avatar\")",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "webp_avatar1.webp"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/avatar",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"avatar"
									]
								}
							},
							"response": []
						},
						{
							"name": "avatar - 2 files to upload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"//Created a bug https://factioninc.atlassian.net/browse/FS-7186 in order to fix the reason of skipping this ^^^ test. ",
											"",
											"    const res = pm.response.json();",
											"    const errorMessage = res.error",
											"    ",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(errorMessage).to.be.equal(\"An error occurred during the uploading avatar.\")",
											"    });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(400)",
											"    });",
											"",
											"    pm.test(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"More than one file is uploaded.\")",
											"    });",
											"  ",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\\n\")",
											"    });",
											"",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users/avatar\")",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "jpeg_avatar.jpeg"
										},
										{
											"key": "",
											"type": "file",
											"src": "gif_avatar.gif"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/avatar",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"avatar"
									]
								}
							},
							"response": []
						},
						{
							"name": "avatar - file size > 2MB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 413\", function () {",
											"    pm.response.to.have.status(413);",
											"",
											"    const res = pm.response.json();",
											"    const errorMessage = res.error",
											"    ",
											"    pm.test(\"Response schema validation\", ()=>{",
											"        pm.response.to.have.jsonSchema (JSON.parse(pm.collectionVariables.get(\"schemaErrorResponse\")));",
											"        });",
											"",
											"    pm.test(\"Response error text is correct\", function () {",
											"        pm.expect(errorMessage).to.include(\"The file(s) is to large to upload.\")",
											"    });",
											"",
											"    pm.test(\"Response 'status' field contains correct status code\", function () {",
											"        pm.expect(res.status).to.be.equal(413)",
											"    });",
											"",
											"    pm.test.skip(\"Response 'message' text is correct\", function () {",
											"        pm.expect(res.message).to.be.equal(\"An error occurred over the avatar uploading.\")",
											"    });",
											"  ",
											"    pm.test(\"Response 'detail' text is correct\", function () {",
											"        pm.expect(res.detail).to.include(\"Traceback (most recent call last):\\n\")",
											"    });",
											"    ",
											"    pm.test(\"Response 'path' contains actual path\", function () {",
											"        pm.expect(res.path).to.include(\"/v1/users/avatar\")",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Organization-Id",
										"value": "{{x-organization-id}}",
										"type": "text"
									},
									{
										"key": "X-Organization-Id",
										"value": "{{mev}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "svg_3Mb.svg"
										}
									]
								},
								"url": {
									"raw": "{{baseURI}}/v1/users/avatar",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"v1",
										"users",
										"avatar"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "ticketId",
			"value": "62982ecb875b0150062f41d8cebb359d"
		},
		{
			"key": "actualTicketNumber",
			"value": "CS0001633"
		},
		{
			"key": "actualTicketTitle",
			"value": "Magnam officiis quasi aspernatur quia dignissimos rerum magnam."
		},
		{
			"key": "actualTicketDescription",
			"value": "Sapiente esse qui tenetur minus."
		},
		{
			"key": "baseURI",
			"value": "https://react-api.factiondev.com",
			"type": "string"
		},
		{
			"key": "token",
			"value": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRlZmF1bHQifQ.eyJjbGllbnRfaWQiOiI0NjAxMDdhZS1kZDNiLTQyODgtOGVjNy00M2MxZmZjMTljZGEiLCJpc3MiOiJodHRwczovL2F1dGgucGluZ29uZS5jb20vNTE0NDEyODEtMzA1Yy00ZTkxLWFjYzAtMjMzNDcwNjcxYzQ5L2FzIiwiaWF0IjoxNjQ5ODgwODUwLCJleHAiOjE2NDk4ODQ0NTAsImF1ZCI6WyJmYWN0aW9uX3BvcnRhbCJdLCJzY29wZSI6InBvcnRhbF9hZG1pbiBvcGVuaWQgcHJvZmlsZSBwb3J0YWwgZW1haWwiLCJzdWIiOiJva2FseW5hIiwic2lkIjoiNmJkYjExNjItMzQ2Mi00YjQ1LTk4MWItYWU2ZDY5MTRkYTYxIiwicG9ydGFsX3JvbGVzIjoiTWFzdGVyX0FkbWluLCBVc2VyIiwidXNlcl9pZCI6Ijc3YjA3ZmYxLTE4ZWMtNGQwNS04ZTQ3LWVmOTI3MTFmMjI4OCIsImxhc3RfbmFtZSI6IkthbHluYSIsImVtYWlsIjoib2xla3NhbmRyLmthbHluYUBtZXYuY29tIiwiZmlyc3RfbmFtZSI6Ik9sZWtzYW5kciIsInBvcHVsYXRpb24iOiI0YTFlNjlkYi00NWQxLTQ4MDctYTdhNy01ODQ2ODMwMjBjZjAiLCJlbnYiOiI1MTQ0MTI4MS0zMDVjLTRlOTEtYWNjMC0yMzM0NzA2NzFjNDkiLCJvcmciOiJjMzZhNGRkYS1mMjQ5LTRlNGQtODkyMC03ZGI1YjhkYzNhODIiLCJwMS51c2VySWQiOiI3N2IwN2ZmMS0xOGVjLTRkMDUtOGU0Ny1lZjkyNzExZjIyODgifQ.cNU803uUF2Qv6yWR4Ebn6P8W7LyTUKP6SD0yzS6EOcAXIFQi1gWdjYmznLpnYCI3TepbDTEO20KUhZOsEUNiH9f_--QogfXLx4lZYI3U6tJdcipOJNuz07Q3mScOc1R4cHYauImjwgyPm2lA6sxbYH97hniSVLvXut5DEd9XHuCOPHFmaG53bQfkSxEPB4uGVwIuLp4XhRBZ1AZyobWKCB50Snj06wOSTQfCLfxXqZysnIHfHeiV46HYcXFi06dvY0YRu0pePy1ZVSnyhgwJUFMxvOGVIkGcKxIxLa_XitwmStNM5Yq2rGlakpoTg8RCK3vl55Y_jdbQke8G_FDkBA",
			"type": "string"
		},
		{
			"key": "anotherOrgTicketId",
			"value": "03392fe9db3530d0bde5d855ca96198c",
			"type": "string"
		},
		{
			"key": "wrongTicketId",
			"value": "39kdj-9399-sslnnlsnvlnsdl",
			"type": "string"
		},
		{
			"key": "wrongTicketAttachmentId",
			"value": "3289-ekjskdnf9d-ssf",
			"type": "string"
		},
		{
			"key": "code_verifier",
			"value": "533c66d253f74dd08b8fea4b2cc80133dfc6ccb5e65a41f2832510d06fa3bb269ccc360d0169480bb1663a65240820ed",
			"type": "string"
		},
		{
			"key": "pingURI",
			"value": "https://auth.pingone.com",
			"type": "string"
		},
		{
			"key": "service_id",
			"value": "51441281-305c-4e91-acc0-233470671c49",
			"type": "string"
		},
		{
			"key": "code_challenge",
			"value": "qwuhyeQXLuMTxnXxk8TEvhDx8ikgyX57tAeXKpxPw7Y",
			"type": "string"
		},
		{
			"key": "code",
			"value": "00fe3a91-60d1-4f51-b10c-7382c9380085",
			"type": "string"
		},
		{
			"key": "commentId",
			"value": "9b1ad4d91b1a051059e153de034bcb8f",
			"type": "string"
		},
		{
			"key": "ccvId",
			"value": "63203e47-89fd-4448-b5f6-8e2501fa7db6",
			"type": "string"
		},
		{
			"key": "notMevCcvId",
			"value": "7e66a395-baf8-47ec-80f4-a2328137e3787e66a395-baf8-47ec-80f4-a2328137e378",
			"type": "string"
		},
		{
			"key": "tempTicketId",
			"value": "fa4f25f31b2d0910039943b4bd4bcb2d",
			"type": "string"
		},
		{
			"key": "fixConnectionId",
			"value": "18601382-47d5-4797-a837-3cb84d36306f",
			"type": "string"
		},
		{
			"key": "password",
			"value": "Qwerty22@",
			"type": "string"
		},
		{
			"key": "master_admin",
			"value": "okalyna",
			"type": "string"
		},
		{
			"key": "actualVifIds",
			"value": "6f2ea7c7-b12d-4636-9bbe-0d6977f93d1e",
			"type": "string"
		},
		{
			"key": "fixCloudProvider",
			"value": "Aws",
			"type": "string"
		},
		{
			"key": "fixProviderRegion",
			"value": "us-east-1",
			"type": "string"
		},
		{
			"key": "restrictedAttachmentError",
			"value": "An error occurred during the uploading ticket attachments.",
			"type": "string"
		},
		{
			"key": "client_id",
			"value": "460107ae-dd3b-4288-8ec7-43c1ffc19cda",
			"type": "string"
		},
		{
			"key": "redirect_uri",
			"value": "https://react-portal.factiondev.com/login-redirect",
			"type": "string"
		},
		{
			"key": "x-organization-id",
			"value": "2b1fc6c7-2cfb-48a1-84f0-e5d5c8c2d234",
			"type": "string"
		},
		{
			"key": "schemaFixConnection",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"identifier\": {\n      \"type\": \"string\"\n    },\n    \"cloudProvider\": {\n      \"type\": \"string\"\n    },\n    \"providerRegion\": {\n      \"type\": \"string\"\n    },\n    \"providerData\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"vifIds\": {\n          \"type\": \"array\",\n          \"items\": [\n            {\n              \"type\": \"string\"\n            }\n          ]\n        }\n      },\n      \"required\": [\n        \"vifIds\"\n      ]\n    },\n    \"bandwidth\": {\n      \"type\": \"string\"\n    },\n    \"active\": {\n      \"type\": \"boolean\"\n    },\n    \"status\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"identifier\",\n    \"cloudProvider\",\n    \"providerRegion\",\n    \"providerData\",\n    \"bandwidth\",\n    \"active\",\n    \"status\"\n  ]\n}",
			"type": "string"
		},
		{
			"key": "schemaFixConnections",
			"value": "{\n  \"type\": \"array\",\n  \"items\": [\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"identifier\": {\n          \"type\": \"string\"\n        },\n        \"cloudProvider\": {\n          \"type\": \"string\"\n        },\n        \"providerRegion\": {\n          \"type\": \"string\"\n        },\n        \"factionLocation\": {\n          \"type\": \"string\"\n        },\n        \"bandwidth\": {\n          \"type\": \"integer\"\n        },\n        \"providerData\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"vifIds\": {\n              \"type\": \"array\",\n              \"items\": [\n                {\n                  \"type\": \"array\",\n                  \"items\": [\n                    {\n                      \"type\": \"string\"\n                    },\n                    {\n                      \"type\": \"string\"\n                    }\n                  ]\n                }\n              ]\n            },\n            \"accountId\": {\n              \"type\": \"array\",\n              \"items\": [\n                {\n                  \"type\": \"string\"\n                }\n              ]\n            }\n          },\n          \"required\": [\n            \"vifIds\",\n            \"accountId\"\n          ]\n        },\n        \"active\": {\n          \"type\": \"boolean\"\n        },\n        \"state\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"identifier\",\n        \"cloudProvider\",\n        \"providerRegion\",\n        \"factionLocation\",\n        \"bandwidth\",\n        \"providerData\",\n        \"active\",\n        \"state\"\n      ]\n    },\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"identifier\": {\n          \"type\": \"string\"\n        },\n        \"factionLocation\": {\n          \"type\": \"string\"\n        },\n        \"bandwidth\": {\n          \"type\": \"integer\"\n        },\n        \"providerData\": {\n          \"type\": \"object\"\n        },\n        \"active\": {\n          \"type\": \"boolean\"\n        },\n        \"state\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"identifier\",\n        \"factionLocation\",\n        \"bandwidth\",\n        \"providerData\",\n        \"active\",\n        \"state\"\n      ]\n    },\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"identifier\": {\n          \"type\": \"string\"\n        },\n        \"cloudProvider\": {\n          \"type\": \"string\"\n        },\n        \"providerRegion\": {\n          \"type\": \"string\"\n        },\n        \"factionLocation\": {\n          \"type\": \"string\"\n        },\n        \"bandwidth\": {\n          \"type\": \"integer\"\n        },\n        \"providerData\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"vifIds\": {\n              \"type\": \"array\",\n              \"items\": [\n                {\n                  \"type\": \"array\",\n                  \"items\": {}\n                }\n              ]\n            },\n            \"accountId\": {\n              \"type\": \"array\",\n              \"items\": [\n                {\n                  \"type\": \"string\"\n                }\n              ]\n            }\n          },\n          \"required\": [\n            \"vifIds\",\n            \"accountId\"\n          ]\n        },\n        \"active\": {\n          \"type\": \"boolean\"\n        },\n        \"state\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"identifier\",\n        \"cloudProvider\",\n        \"providerRegion\",\n        \"factionLocation\",\n        \"bandwidth\",\n        \"providerData\",\n        \"active\",\n        \"state\"\n      ]\n    },\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"identifier\": {\n          \"type\": \"string\"\n        },\n        \"cloudProvider\": {\n          \"type\": \"string\"\n        },\n        \"factionLocation\": {\n          \"type\": \"string\"\n        },\n        \"bandwidth\": {\n          \"type\": \"integer\"\n        },\n        \"providerData\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"vlanAttachmentNames\": {\n              \"type\": \"array\",\n              \"items\": [\n                {\n                  \"type\": \"null\"\n                }\n              ]\n            }\n          },\n          \"required\": [\n            \"vlanAttachmentNames\"\n          ]\n        },\n        \"active\": {\n          \"type\": \"boolean\"\n        },\n        \"state\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"identifier\",\n        \"cloudProvider\",\n        \"factionLocation\",\n        \"bandwidth\",\n        \"providerData\",\n        \"active\",\n        \"state\"\n      ]\n    },\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"identifier\": {\n          \"type\": \"string\"\n        },\n        \"cloudProvider\": {\n          \"type\": \"string\"\n        },\n        \"providerRegion\": {\n          \"type\": \"string\"\n        },\n        \"factionLocation\": {\n          \"type\": \"string\"\n        },\n        \"bandwidth\": {\n          \"type\": \"integer\"\n        },\n        \"providerData\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"authKeyCredentialsId\": {\n              \"type\": \"array\",\n              \"items\": [\n                {\n                  \"type\": \"string\"\n                }\n              ]\n            },\n            \"expressRouteUrlSecretNames\": {\n              \"type\": \"array\",\n              \"items\": [\n                {\n                  \"type\": \"array\",\n                  \"items\": {}\n                }\n              ]\n            }\n          },\n          \"required\": [\n            \"authKeyCredentialsId\",\n            \"expressRouteUrlSecretNames\"\n          ]\n        },\n        \"active\": {\n          \"type\": \"boolean\"\n        },\n        \"state\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"identifier\",\n        \"cloudProvider\",\n        \"providerRegion\",\n        \"factionLocation\",\n        \"bandwidth\",\n        \"providerData\",\n        \"active\",\n        \"state\"\n      ]\n    }\n  ]\n}",
			"type": "string"
		},
		{
			"key": "schemaErrorResponse",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"timestamp\": {\n      \"type\": \"string\"\n    },\n    \"status\": {\n      \"type\": \"integer\"\n    },\n    \"error\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"detail\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"timestamp\",\n    \"status\",\n    \"error\",\n    \"message\",\n    \"detail\",\n    \"path\"\n  ]\n}",
			"type": "string"
		},
		{
			"key": "schemaTicket",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"identifier\": {\n      \"type\": \"string\"\n    },\n    \"number\": {\n      \"type\": \"string\"\n    },\n    \"state\": {\n      \"type\": \"string\"\n    },\n    \"lastUpdated\": {\n      \"type\": \"string\"\n    },\n    \"openedAt\": {\n      \"type\": \"string\"\n    },\n    \"openedBy\": {\n      \"type\": \"string\"\n    },\n    \"title\": {\n      \"type\": \"string\"\n    },\n    \"description\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"identifier\",\n    \"number\",\n    \"state\",\n    \"lastUpdated\",\n    \"openedAt\",\n    \"openedBy\",\n    \"title\",\n    \"description\"\n  ]\n}",
			"type": "string"
		},
		{
			"key": "schemaTicketComment",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"identifier\": {\n      \"type\": \"string\"\n    },\n    \"text\": {\n      \"type\": \"string\"\n    },\n    \"createdAt\": {\n      \"type\": \"string\"\n    },\n    \"createdBy\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"identifier\",\n    \"text\",\n    \"createdAt\",\n    \"createdBy\"\n  ]\n}",
			"type": "string"
		},
		{
			"key": "schemaTicketComments",
			"value": "{\n  \"type\": \"array\",\n  \"items\": [\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"identifier\": {\n          \"type\": \"string\"\n        },\n        \"text\": {\n          \"type\": \"string\"\n        },\n        \"createdAt\": {\n          \"type\": \"string\"\n        },\n        \"createdBy\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"identifier\",\n        \"text\",\n        \"createdAt\",\n        \"createdBy\"\n      ]\n    },\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"identifier\": {\n          \"type\": \"string\"\n        },\n        \"text\": {\n          \"type\": \"string\"\n        },\n        \"createdAt\": {\n          \"type\": \"string\"\n        },\n        \"createdBy\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"identifier\",\n        \"text\",\n        \"createdAt\",\n        \"createdBy\"\n      ]\n    }\n  ]\n}",
			"type": "string"
		},
		{
			"key": "schemaTicketAttachments",
			"value": "{\n  \"type\": \"array\",\n  \"items\": [\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"identifier\": {\n          \"type\": \"string\"\n        },\n        \"fileName\": {\n          \"type\": \"string\"\n        },\n        \"sizeBytes\": {\n          \"type\": \"string\"\n        },\n        \"ticketId\": {\n          \"type\": \"string\"\n        },\n        \"contentType\": {\n          \"type\": \"string\"\n        },\n        \"createdAt\": {\n          \"type\": \"string\"\n        },\n        \"createdBy\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"identifier\",\n        \"fileName\",\n        \"sizeBytes\",\n        \"ticketId\",\n        \"contentType\",\n        \"createdAt\",\n        \"createdBy\"\n      ]\n    },\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"identifier\": {\n          \"type\": \"string\"\n        },\n        \"fileName\": {\n          \"type\": \"string\"\n        },\n        \"sizeBytes\": {\n          \"type\": \"string\"\n        },\n        \"ticketId\": {\n          \"type\": \"string\"\n        },\n        \"contentType\": {\n          \"type\": \"string\"\n        },\n        \"createdAt\": {\n          \"type\": \"string\"\n        },\n        \"createdBy\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"identifier\",\n        \"fileName\",\n        \"sizeBytes\",\n        \"ticketId\",\n        \"contentType\",\n        \"createdAt\",\n        \"createdBy\"\n      ]\n    }\n  ]\n}",
			"type": "string"
		},
		{
			"key": "schemaTickets",
			"value": "{\n  \"type\": \"array\",\n  \"items\": [\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"identifier\": {\n          \"type\": \"string\"\n        },\n        \"number\": {\n          \"type\": \"string\"\n        },\n        \"state\": {\n          \"type\": \"string\"\n        },\n        \"lastUpdated\": {\n          \"type\": \"string\"\n        },\n        \"openedAt\": {\n          \"type\": \"string\"\n        },\n        \"openedBy\": {\n          \"type\": \"string\"\n        },\n        \"title\": {\n          \"type\": \"string\"\n        },\n        \"description\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"identifier\",\n        \"number\",\n        \"state\",\n        \"lastUpdated\",\n        \"openedAt\",\n        \"openedBy\",\n        \"title\",\n        \"description\"\n      ]\n    }\n  ]\n}",
			"type": "string"
		},
		{
			"key": "schemaOrganizations",
			"value": "{\n  \"type\": \"array\",\n  \"items\": [\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"identifier\": {\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"orgCode\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"identifier\",\n        \"name\",\n        \"orgCode\"\n      ]\n    },\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"identifier\": {\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"orgCode\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"identifier\",\n        \"name\",\n        \"orgCode\"\n      ]\n    }\n  ]\n}",
			"type": "string"
		},
		{
			"key": "schemaOrganization",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"identifier\": {\n      \"type\": \"string\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"orgCode\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"identifier\",\n    \"name\",\n    \"orgCode\"\n  ]\n}",
			"type": "string"
		},
		{
			"key": "schemaLocations",
			"value": "{\n  \"type\": \"array\",\n  \"items\": [\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"identifier\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"identifier\"\n      ]\n    },\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"identifier\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"identifier\"\n      ]\n    }\n  ]\n}",
			"type": "string"
		},
		{
			"key": "schemaAvailabilities",
			"value": "{\n  \"type\": \"array\",\n  \"items\": [\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"regions\": {\n          \"type\": \"array\",\n          \"items\": [\n            {\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"provider\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"regions\",\n        \"provider\"\n      ]\n    },\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"regions\": {\n          \"type\": \"array\",\n          \"items\": [\n            {\n              \"type\": \"string\"\n            }\n          ]\n        },\n        \"provider\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"regions\",\n        \"provider\"\n      ]\n    }\n  ]\n}",
			"type": "string"
		},
		{
			"key": "schemaCCVs",
			"value": "{\n  \"type\": \"array\",\n  \"items\": [\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"identifier\": {\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"totalSizeInBytes\": {\n          \"type\": \"number\"\n        },\n        \"usedSizeInBytes\": {\n          \"type\": \"integer\"\n        },\n        \"iops\": {\n          \"type\": \"integer\"\n        },\n        \"sloThroughput\": {\n          \"type\": \"integer\"\n        },\n        \"factionLocationId\": {\n          \"type\": \"string\"\n        },\n        \"networks\": {\n          \"type\": \"string\"\n        },\n        \"iqns\": {\n          \"type\": \"string\"\n        },\n        \"version\": {\n          \"type\": \"string\"\n        },\n        \"createdAt\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"identifier\",\n        \"name\",\n        \"totalSizeInBytes\",\n        \"usedSizeInBytes\",\n        \"iops\",\n        \"sloThroughput\",\n        \"factionLocationId\",\n        \"networks\",\n        \"iqns\",\n        \"version\",\n        \"createdAt\"\n      ]\n    }\n  ]\n}",
			"type": "string"
		},
		{
			"key": "schemaCCV",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"identifier\": {\n      \"type\": \"string\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"totalSizeInBytes\": {\n      \"type\": \"number\"\n    },\n    \"usedSizeInBytes\": {\n      \"type\": \"integer\"\n    },\n    \"iops\": {\n      \"type\": \"integer\"\n    },\n    \"sloThroughput\": {\n      \"type\": \"integer\"\n    },\n    \"factionLocationId\": {\n      \"type\": \"string\"\n    },\n    \"networks\": {\n      \"type\": \"string\"\n    },\n    \"iqns\": {\n      \"type\": \"string\"\n    },\n    \"version\": {\n      \"type\": \"string\"\n    },\n    \"createdAt\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"identifier\",\n    \"name\",\n    \"totalSizeInBytes\",\n    \"usedSizeInBytes\",\n    \"iops\",\n    \"sloThroughput\",\n    \"factionLocationId\",\n    \"networks\",\n    \"iqns\",\n    \"version\",\n    \"createdAt\"\n  ]\n}",
			"type": "string"
		},
		{
			"key": "schemaMetrics",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"health\": {\n      \"type\": \"string\"\n    },\n    \"capacity\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"total\": {\n          \"type\": \"number\"\n        },\n        \"used\": {\n          \"type\": \"number\"\n        }\n      },\n      \"required\": [\n        \"total\",\n        \"used\"\n      ]\n    }\n  },\n  \"required\": [\n    \"health\",\n    \"capacity\"\n  ]\n}",
			"type": "string"
		},
		{
			"key": "schemaUsers",
			"value": "{\n  \"type\": \"array\",\n  \"items\": [\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"identifier\": {\n          \"type\": \"string\"\n        },\n        \"username\": {\n          \"type\": \"string\"\n        },\n        \"firstName\": {\n          \"type\": \"string\"\n        },\n        \"lastName\": {\n          \"type\": \"string\"\n        },\n        \"email\": {\n          \"type\": \"string\"\n        },\n        \"phone\": {\n          \"type\": [\"string\", \"null\"]\n        },\n        \"timezone\": {\n          \"type\": [\"string\", \"null\"]\n        },\n        \"roles\": {\n          \"type\": \"array\",\n          \"items\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"string\"\n            }\n          ]\n        }\n      },\n      \"required\": [\n        \"identifier\",\n        \"username\",\n        \"firstName\",\n        \"lastName\",\n        \"email\",\n        \"phone\",\n        \"timezone\",\n        \"roles\"\n      ]\n    },\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"identifier\": {\n          \"type\": \"string\"\n        },\n        \"username\": {\n          \"type\": \"string\"\n        },\n        \"firstName\": {\n          \"type\": \"string\"\n        },\n        \"lastName\": {\n          \"type\": \"string\"\n        },\n        \"email\": {\n          \"type\": \"string\"\n        },\n        \"phone\": {\n          \"type\": [\"string\", \"null\"]\n        },\n        \"timezone\": {\n          \"type\": [\"string\", \"null\"]\n        },\n        \"roles\": {\n          \"type\": \"array\",\n          \"items\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"string\"\n            }\n          ]\n        }\n      },\n      \"required\": [\n        \"identifier\",\n        \"username\",\n        \"firstName\",\n        \"lastName\",\n        \"email\",\n        \"phone\",\n        \"timezone\",\n        \"roles\"\n      ]\n    }\n  ]\n}",
			"type": "string"
		},
		{
			"key": "schemaUser",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"identifier\": {\n      \"type\": \"string\"\n    },\n    \"username\": {\n      \"type\": \"string\"\n    },\n    \"firstName\": {\n      \"type\": \"string\"\n    },\n    \"lastName\": {\n      \"type\": \"string\"\n    },\n    \"email\": {\n      \"type\": \"string\"\n    },\n    \"phone\": {\n      \"type\": [\"string\", \"null\"]\n    },\n    \"timezone\": {\n      \"type\": [\"string\", \"null\"]\n    },\n    \"roles\": {\n      \"type\": \"array\",\n      \"items\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"string\"\n        }\n      ]\n    }\n  },\n  \"required\": [\n    \"identifier\",\n    \"username\",\n    \"firstName\",\n    \"lastName\",\n    \"email\",\n    \"phone\",\n    \"timezone\",\n    \"roles\"\n  ]\n}",
			"type": "string"
		},
		{
			"key": "schemaUserPassword",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"identifier\": {\n      \"type\": \"string\"\n    },\n    \"userStatus\": {\n      \"type\": \"string\"\n    },\n    \"password\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"identifier\",\n    \"userStatus\",\n    \"password\"\n  ]\n}",
			"type": "string"
		},
		{
			"key": "schemaUserChangePassword",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"identifier\": {\n      \"type\": \"string\"\n    },\n    \"userStatus\": {\n      \"type\": \"string\"\n    },\n    \"password\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"identifier\",\n    \"userStatus\",\n    \"password\"\n  ]\n}",
			"type": "string"
		},
		{
			"key": "schemaDashboards",
			"value": "{\n  \"type\": \"array\",\n  \"items\": [\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"identifier\": {\n          \"type\": \"integer\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"widgetsConfig\": {\n          \"type\": \"array\",\n          \"items\": [\n            {\n              \"type\": \"object\",\n              \"properties\": {\n                \"identifier\": {\n                  \"type\": \"string\"\n                },\n                \"name\": {\n                  \"type\": \"string\"\n                },\n                \"type\": {\n                  \"type\": \"string\"\n                },\n                \"col\": {\n                  \"type\": \"integer\"\n                },\n                \"sizex\": {\n                  \"type\": \"integer\"\n                },\n                \"row\": {\n                  \"type\": \"integer\"\n                },\n                \"sizey\": {\n                  \"type\": \"integer\"\n                }\n              },\n              \"required\": [\n                \"identifier\",\n                \"name\",\n                \"type\",\n                \"col\",\n                \"sizex\",\n                \"row\",\n                \"sizey\"\n              ]\n            },\n            {\n              \"type\": \"object\",\n              \"properties\": {\n                \"identifier\": {\n                  \"type\": \"string\"\n                },\n                \"name\": {\n                  \"type\": \"string\"\n                },\n                \"type\": {\n                  \"type\": \"string\"\n                },\n                \"col\": {\n                  \"type\": \"integer\"\n                },\n                \"sizex\": {\n                  \"type\": \"integer\"\n                },\n                \"row\": {\n                  \"type\": \"integer\"\n                },\n                \"sizey\": {\n                  \"type\": \"integer\"\n                }\n              },\n              \"required\": [\n                \"identifier\",\n                \"name\",\n                \"type\",\n                \"col\",\n                \"sizex\",\n                \"row\",\n                \"sizey\"\n              ]\n            },\n            {\n              \"type\": \"object\",\n              \"properties\": {\n                \"identifier\": {\n                  \"type\": \"string\"\n                },\n                \"name\": {\n                  \"type\": \"string\"\n                },\n                \"type\": {\n                  \"type\": \"string\"\n                },\n                \"col\": {\n                  \"type\": \"integer\"\n                },\n                \"sizex\": {\n                  \"type\": \"integer\"\n                },\n                \"row\": {\n                  \"type\": \"integer\"\n                },\n                \"sizey\": {\n                  \"type\": \"integer\"\n                }\n              },\n              \"required\": [\n                \"identifier\",\n                \"name\",\n                \"type\",\n                \"col\",\n                \"sizex\",\n                \"row\",\n                \"sizey\"\n              ]\n            },\n            {\n              \"type\": \"object\",\n              \"properties\": {\n                \"identifier\": {\n                  \"type\": \"string\"\n                },\n                \"name\": {\n                  \"type\": \"string\"\n                },\n                \"type\": {\n                  \"type\": \"string\"\n                },\n                \"col\": {\n                  \"type\": \"integer\"\n                },\n                \"sizex\": {\n                  \"type\": \"integer\"\n                },\n                \"row\": {\n                  \"type\": \"integer\"\n                },\n                \"sizey\": {\n                  \"type\": \"integer\"\n                }\n              },\n              \"required\": [\n                \"identifier\",\n                \"name\",\n                \"type\",\n                \"col\",\n                \"sizex\",\n                \"row\",\n                \"sizey\"\n              ]\n            },\n            {\n              \"type\": \"object\",\n              \"properties\": {\n                \"identifier\": {\n                  \"type\": \"string\"\n                },\n                \"name\": {\n                  \"type\": \"string\"\n                },\n                \"type\": {\n                  \"type\": \"string\"\n                },\n                \"col\": {\n                  \"type\": \"integer\"\n                },\n                \"sizex\": {\n                  \"type\": \"integer\"\n                },\n                \"row\": {\n                  \"type\": \"integer\"\n                },\n                \"sizey\": {\n                  \"type\": \"integer\"\n                }\n              },\n              \"required\": [\n                \"identifier\",\n                \"name\",\n                \"type\",\n                \"col\",\n                \"sizex\",\n                \"row\",\n                \"sizey\"\n              ]\n            },\n            {\n              \"type\": \"object\",\n              \"properties\": {\n                \"identifier\": {\n                  \"type\": \"string\"\n                },\n                \"name\": {\n                  \"type\": \"string\"\n                },\n                \"type\": {\n                  \"type\": \"string\"\n                },\n                \"col\": {\n                  \"type\": \"integer\"\n                },\n                \"sizex\": {\n                  \"type\": \"integer\"\n                },\n                \"row\": {\n                  \"type\": \"integer\"\n                },\n                \"sizey\": {\n                  \"type\": \"integer\"\n                }\n              },\n              \"required\": [\n                \"identifier\",\n                \"name\",\n                \"type\",\n                \"col\",\n                \"sizex\",\n                \"row\",\n                \"sizey\"\n              ]\n            }\n          ]\n        }\n      },\n      \"required\": [\n        \"identifier\",\n        \"name\",\n        \"widgetsConfig\"\n      ]\n    }\n  ]\n}",
			"type": "string"
		},
		{
			"key": "attachmentId",
			"value": "b5a82ecb875b0150062f41d8cebb358a"
		},
		{
			"key": "actualCommentId",
			"value": "1c3cf9e51bd30d5059e153de034bcb7f"
		},
		{
			"key": "actualCommentText",
			"value": "Culpa mollitia rem hic voluptatum corrupti consectetur eos."
		},
		{
			"key": "attachmentFileName",
			"value": "3mb-SVG.svg"
		},
		{
			"key": "ticketId1",
			"value": "f44cfd691b53c950039943b4bd4bcb64"
		},
		{
			"key": "actualTicketNumber1",
			"value": "CS0005230"
		},
		{
			"key": "actualTicketTitle1",
			"value": "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient."
		},
		{
			"key": "actualTicketDescription1",
			"value": "a"
		},
		{
			"key": "actualCommentId1",
			"value": "2b5cf9a91b53c950039943b4bd4bcb43"
		},
		{
			"key": "actualCommentText1",
			"value": "M"
		},
		{
			"key": "attachmentId1",
			"value": "0dd8eecb875b0150062f41d8cebb3588"
		},
		{
			"key": "attachmentFileName1",
			"value": "Free_Test_Data_500KB_RTF.rtf"
		},
		{
			"key": "ticketId2",
			"value": "0a5c7de51bd30d5059e153de034bcbc8"
		},
		{
			"key": "actualTicketNumber2",
			"value": "CS0005231"
		},
		{
			"key": "actualTicketTitle2",
			"value": "k"
		},
		{
			"key": "actualTicketDescription2",
			"value": "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis,"
		},
		{
			"key": "attachmentId2",
			"value": "5d6c31291bd30d5059e153de034bcb37"
		},
		{
			"key": "attachmentFileName2",
			"value": "SampleTextFile_50kb.txt"
		},
		{
			"key": "organizationId",
			"value": "00833a83-eb5e-42c2-9a29-114d3094cdfa"
		},
		{
			"key": "organizationName",
			"value": "TETRA Tech. Inc"
		},
		{
			"key": "orgCode",
			"value": "TETR"
		},
		{
			"key": "ccvName",
			"value": "ccv_MEV"
		},
		{
			"key": "ccvTotalSizeInBytes",
			"value": 344444000000000000
		},
		{
			"key": "ccvUsedSizeInBytes",
			"value": 0
		},
		{
			"key": "ccvIops",
			"value": 0
		},
		{
			"key": "ccvSloThroughput",
			"value": 200
		},
		{
			"key": "ccvFactionLocationId",
			"value": "CHI1"
		},
		{
			"key": "ccvVersion",
			"value": "V2"
		},
		{
			"key": "ccvusedSizeInBytes",
			"value": 0
		},
		{
			"key": "master",
			"value": "Master_Admin",
			"type": "string"
		},
		{
			"key": "group",
			"value": "Group_Admin",
			"type": "string"
		},
		{
			"key": "org",
			"value": "Org_Admin",
			"type": "string"
		},
		{
			"key": "technician",
			"value": "Technician",
			"type": "string"
		},
		{
			"key": "user_role",
			"value": "User",
			"type": "string"
		},
		{
			"key": "myTimeZone",
			"value": "Europe/Kiev",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "8107a650-e014-4ef6-bb2b-809a7c9ab956"
		},
		{
			"key": "2001charText",
			"value": "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper ultricies nisi. Nam eget dui. Etiam rhoncus. Maecenas tempus, tellus eget condimentum rhoncus, sem quam semper libero, sit amet adipiscing sem neque sed ipsum. Nam quam nunc, blandit vel, luctus pulvinar, hendrerit id, lorem. Maecenas nec odio et ante tincidunt tempus. Donec vitae sapien ut libero venenatis faucibus. Nullam quis ante. Etiam sit amet orci eget eros faucibus tincidunt. Duis leo. Sed fringilla mauris sit amet nibh. Donec sodales sagittis magna. Sed consequat, leo eget bibendum sodales, augue velit cursus nunc, quis gravida magna mi a libero. Fusce vulputate eleifend sapien. Vestibulum purus quam, scelerisque ut, mollis sed, nonummy id, metus. Nullam accumsan lorem in dui. Cras ultricies mi eu turpis hendrerit fringilla. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; In ac dui quis mi consectetuer lacinia. Nam pretium turpis et arcu. Duis arcu tortor, suscipit eget, imperdiet nec, imperdiet iaculis, ipsum. Sed aliquam ultrices mauris. Integer ante arcu, accumsan a, consectetuer eget, posuere ut, mauris. Praesent adipiscing. Phasellus ullamcorper ipsum rutrum nunc. Nunc nonummy metus. Vestibu",
			"type": "string"
		},
		{
			"key": "1027charText",
			"value": "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper ultricies nisi. Nam eget dui. Etiam rhoncus. Maecenas tempus, tellus eget condimentum rhoncus, sem quam semper libero, sit amet adipiscing sem neque sed ipsum. Nam quam nunc, blandit vel,.",
			"type": "string"
		},
		{
			"key": "257charText",
			"value": "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, s",
			"type": "string"
		},
		{
			"key": "256charText",
			"value": "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptad",
			"type": "string"
		},
		{
			"key": "255charText",
			"value": "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis,",
			"type": "string"
		},
		{
			"key": "161charText",
			"value": "Lorem ipsum dolor sit ametw, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient.",
			"type": "string"
		},
		{
			"key": "160charText",
			"value": "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient.",
			"type": "string"
		},
		{
			"key": "129charText",
			"value": "abc def ghi jkl mno pqrs tuv wxyz ABC DEF GHI JKL MNO PQRS TUV WXYZ !&§ $%& /() =?* '<> #|; ²³~ @`´ ©«» ¤¼× {} abc def ghi jkl mn",
			"type": "string"
		},
		{
			"key": "128charText",
			"value": "qqwertyuioopplkjhgfdsazxcvbnmqqwertyuioopplkjhgfdsazxcvbnmqqwertyuioopqqwertyuioopplkjhgfdsazxcvbnmqqwertyuioopplkjhgfdsazxcvbnm",
			"type": "string"
		},
		{
			"key": "33charText",
			"value": "Thequick,3brownfoxjumpsoverwa3123",
			"type": "string"
		},
		{
			"key": "33digitsPhoneNumber",
			"value": "+31234567890123456789012345678123",
			"type": "string"
		},
		{
			"key": "userEmail",
			"value": "Ronaldo_Torp@hotmail.com"
		},
		{
			"key": "userForChangePasswordId",
			"value": "8b2f72bd-0c83-4a28-babc-515e765a43a0"
		},
		{
			"key": "wrongUserId",
			"value": "'33506a3-0c23-4ce9-a590-8514cfbadac*",
			"type": "string"
		},
		{
			"key": "userTempPassword",
			"value": "FU1hkNvHptRPv3G+22"
		},
		{
			"key": "locationsDict",
			"value": {
				"0": {
					"csp": "Aws",
					"dc": "DC15",
					"reg": "eu-west-2"
				},
				"1": {
					"csp": "Gcp",
					"dc": "DC15",
					"reg": "us-east4"
				},
				"2": {
					"csp": "Gcp",
					"dc": "PDX1",
					"reg": "us-west1"
				},
				"3": {
					"csp": "Gcp",
					"dc": "PDX1",
					"reg": "us-west2"
				}
			}
		},
		{
			"key": "userPreviousPassword",
			"value": "b16KeBj_PpUKBLN+22"
		},
		{
			"key": "userForOneTimePasswordId",
			"value": "8c7691d4-a8f8-47ea-99e7-63f80baa7e9c"
		},
		{
			"key": "userFirstName",
			"value": "Rosalee"
		},
		{
			"key": "userLastName",
			"value": "delete_test_Satterfield"
		},
		{
			"key": "userPhoneNumber",
			"value": "578-366-6452"
		},
		{
			"key": "userMainRole",
			"value": "Master_Admin"
		},
		{
			"key": "userTimeZone",
			"value": "Europe/Kiev"
		},
		{
			"key": "userPhotoUrl",
			"value": null
		},
		{
			"key": "newTimeZone",
			"value": "America/Chicago",
			"type": "string"
		},
		{
			"key": "userName",
			"value": ""
		},
		{
			"key": "changedPhotoUrl",
			"value": ""
		},
		{
			"key": "changedPassword",
			"value": ""
		},
		{
			"key": "longUserName",
			"value": "Pqwertyuioopplkjhgfdsazxcvbnmqqwertyuioopplkjhgfdsazxcvbnmqqwertyuioopqqwertyuioopplkjhgfdsazxcvbnmqqwertyuioopplkjhgfdsazxcvbnm",
			"type": "string"
		},
		{
			"key": "longFirstName",
			"value": "Robertrtyuioopplkjhgfdsazxcvbnmqqwertyuioopplkjhgfdsazxcvbnmqqwertyuioopqqwertyuioopplkjhgfdsazxcvbnmqqwertyuioopplkjhgfdsazxcvd",
			"type": "string"
		},
		{
			"key": "longLastName",
			"value": "delete_Rertrtyuioopplkjhgfdsazxcvbnmqqwertyuioopplkjhgfdsazxcvbnmqqwertyuioopqqwertyuioopplkjhgfdsazxcvbnmqqwertyuioopplkjhgfdsa",
			"type": "string"
		},
		{
			"key": "longEmail",
			"value": "",
			"type": "string"
		},
		{
			"key": "longTimeZone",
			"value": "Kyivertrtyuioopplkjhgfdsazxcvbnmqqwertyuioopplkjhgfdsazxcvbnmqqwertyuioopqqwertyuioopplkjhgfdsazxcvbnmqqwertyuioopplkjhgfdsa/Kyivertrtyuioopplkjhgfdsazxcvbnmqqwertyuioopplkjhgfdsazxcvbnmqqwertyuioopqqwertyuioopplkjhgfdsazxcvbnmqqwertyuioopplkjhgfdpirjfjdn",
			"type": "string"
		},
		{
			"key": "longPhoneNumber",
			"value": "098-5202-0509-1523-23432423-9081",
			"type": "string"
		},
		{
			"key": "mev",
			"value": "2b1fc6c7-2cfb-48a1-84f0-e5d5c8c2d234",
			"type": "string"
		},
		{
			"key": "randomString128",
			"value": ""
		},
		{
			"key": "randomString1",
			"value": ""
		},
		{
			"key": "dashboardId",
			"value": ""
		},
		{
			"key": "widgetId",
			"value": ""
		},
		{
			"key": "widgetName",
			"value": ""
		},
		{
			"key": "schemaCgraphWidget",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"identifier\": {\n      \"type\": \"string\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"type\": {\n      \"type\": \"string\"\n    },\n    \"timescale\": {\n      \"type\": \"string\"\n    },\n    \"verticalLabel\": {\n      \"type\": \"string\"\n    },\n    \"startTime\": {\n      \"type\": \"integer\"\n    },\n    \"endTime\": {\n      \"type\": \"integer\"\n    },\n    \"items\": {\n      \"type\": \"array\",\n      \"items\": [\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"visible\": {\n              \"type\": \"boolean\"\n            },\n            \"legend\": {\n              \"type\": \"string\"\n            },\n            \"data\": {\n              \"type\": \"array\",\n              \"items\": [\n                {\n                  \"type\": \"number\"\n                },\n                {\n                  \"type\": \"number\"\n                }\n              ]\n            },\n            \"color\": {\n              \"type\": \"string\"\n            },\n            \"label\": {\n              \"type\": \"string\"\n            },\n            \"min\": {\n              \"type\": \"number\"\n            },\n            \"max\": {\n              \"type\": \"number\"\n            },\n            \"avg\": {\n              \"type\": \"number\"\n            }\n          },\n          \"required\": [\n            \"visible\",\n            \"legend\",\n            \"data\",\n            \"color\",\n            \"label\",\n            \"min\",\n            \"max\",\n            \"avg\"\n          ]\n        }\n      ]\n    },\n    \"timestamps\": {\n      \"type\": \"array\",\n      \"items\": [\n        {\n          \"type\": \"integer\"\n        }\n      ]\n    }\n  },\n  \"required\": [\n    \"identifier\",\n    \"name\",\n    \"type\",\n    \"timescale\",\n    \"verticalLabel\",\n    \"startTime\",\n    \"endTime\",\n    \"items\",\n    \"timestamps\"\n  ]\n}",
			"type": "string"
		},
		{
			"key": "schemaTableWidget",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"identifier\": {\n      \"type\": \"string\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"type\": {\n      \"type\": \"string\"\n    },\n    \"timescale\": {\n      \"type\": \"string\"\n    },\n    \"pageSize\": {\n      \"type\": \"string\"\n    },\n    \"columnHeaders\": {\n      \"type\": \"array\",\n      \"items\": [\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"name\": {\n              \"type\": \"string\"\n            },\n            \"visible\": {\n              \"type\": \"boolean\"\n            },\n            \"size\": {\n              \"type\": \"integer\"\n            }\n          },\n          \"required\": [\n            \"name\",\n            \"visible\",\n            \"size\"\n          ]\n        }\n      ]\n    },\n    \"rows\": {\n      \"type\": \"array\",\n      \"items\": [\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"deviceId\": {\n              \"type\": \"integer\"\n            },\n            \"deviceDisplayName\": {\n              \"type\": \"string\"\n            },\n            \"cells\": {\n              \"type\": \"array\",\n              \"items\": [\n                {\n                  \"type\": \"string\"\n                },\n                {\n                  \"type\": \"number\"\n                },\n                {\n                  \"type\": \"number\"\n                }\n              ]\n            }\n          },\n          \"required\": [\n            \"deviceId\",\n            \"deviceDisplayName\",\n            \"cells\"\n          ]\n        }\n      ]\n    }\n  },\n  \"required\": [\n    \"identifier\",\n    \"name\",\n    \"type\",\n    \"timescale\",\n    \"pageSize\",\n    \"columnHeaders\",\n    \"rows\"\n  ]\n}",
			"type": "string"
		},
		{
			"key": "wrongWidgetId",
			"value": "0000",
			"type": "string"
		},
		{
			"key": "wrongDashboardId",
			"value": "0000",
			"type": "string"
		}
	]
}